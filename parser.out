Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     function_definition -> type_specifier declarator compound_statement
Rule 6     type_specifier -> VOID
Rule 7     type_specifier -> CHAR
Rule 8     type_specifier -> SHORT
Rule 9     type_specifier -> INT
Rule 10    type_specifier -> LONG
Rule 11    type_specifier -> FLOAT
Rule 12    type_specifier -> DOUBLE
Rule 13    type_specifier -> SIGNED
Rule 14    type_specifier -> UNSIGNED
Rule 15    declarator -> pointer direct_declarator
Rule 16    declarator -> direct_declarator
Rule 17    pointer -> TIMES
Rule 18    pointer -> TIMES pointer
Rule 19    direct_declarator -> ID
Rule 20    direct_declarator -> LPAREN declarator RPAREN
Rule 21    direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET
Rule 22    direct_declarator -> direct_declarator LBRACKET RBRACKET
Rule 23    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 24    direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 25    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 26    constant_expression -> conditional_expression
Rule 27    conditional_expression -> logical_or_expression
Rule 28    conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 29    logical_or_expression -> logical_and_expression
Rule 30    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 31    logical_and_expression -> inclusive_or_expression
Rule 32    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 33    inclusive_or_expression -> exclusive_or_expression
Rule 34    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 35    exclusive_or_expression -> and_expression
Rule 36    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 37    and_expression -> equality_expression
Rule 38    and_expression -> and_expression AND equality_expression
Rule 39    equality_expression -> relational_expression
Rule 40    equality_expression -> equality_expression EQ relational_expression
Rule 41    equality_expression -> equality_expression NE relational_expression
Rule 42    relational_expression -> shift_expression
Rule 43    relational_expression -> relational_expression LT shift_expression
Rule 44    relational_expression -> relational_expression GT shift_expression
Rule 45    relational_expression -> relational_expression LE shift_expression
Rule 46    relational_expression -> relational_expression GE shift_expression
Rule 47    shift_expression -> additive_expression
Rule 48    shift_expression -> shift_expression LSHIFT additive_expression
Rule 49    shift_expression -> shift_expression RSHIFT additive_expression
Rule 50    additive_expression -> multiplicative_expression
Rule 51    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 52    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 53    multiplicative_expression -> cast_expression
Rule 54    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 55    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 56    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 57    cast_expression -> unary_expression
Rule 58    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 59    unary_expression -> postfix_expression
Rule 60    unary_expression -> PLUSPLUS unary_expression
Rule 61    unary_expression -> MINUSMINUS unary_expression
Rule 62    unary_expression -> unary_operator cast_expression
Rule 63    unary_expression -> SIZEOF unary_expression
Rule 64    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 65    postfix_expression -> primary_expression
Rule 66    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 67    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 68    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 69    postfix_expression -> postfix_expression PERIOD ID
Rule 70    postfix_expression -> postfix_expression ARROW ID
Rule 71    postfix_expression -> postfix_expression PLUSPLUS
Rule 72    postfix_expression -> postfix_expression MINUSMINUS
Rule 73    primary_expression -> ID
Rule 74    primary_expression -> constant
Rule 75    primary_expression -> SCONST
Rule 76    primary_expression -> LPAREN expression RPAREN
Rule 77    constant -> ICONST
Rule 78    constant -> FCONST
Rule 79    constant -> CCONST
Rule 80    expression -> assignment_expression
Rule 81    expression -> expression COMMA assignment_expression
Rule 82    assignment_expression -> conditional_expression
Rule 83    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 84    assignment_operator -> EQUALS
Rule 85    assignment_operator -> TIMESEQUAL
Rule 86    assignment_operator -> DIVEQUAL
Rule 87    assignment_operator -> MODEQUAL
Rule 88    assignment_operator -> PLUSEQUAL
Rule 89    assignment_operator -> MINUSEQUAL
Rule 90    assignment_operator -> LSHIFTEQUAL
Rule 91    assignment_operator -> RSHIFTEQUAL
Rule 92    assignment_operator -> ANDEQUAL
Rule 93    assignment_operator -> OREQUAL
Rule 94    assignment_operator -> XOREQUAL
Rule 95    unary_operator -> AND
Rule 96    unary_operator -> TIMES
Rule 97    unary_operator -> PLUS
Rule 98    unary_operator -> MINUS
Rule 99    unary_operator -> NOT
Rule 100   unary_operator -> LNOT
Rule 101   type_name -> type_specifier abstract_declarator
Rule 102   type_name -> type_specifier
Rule 103   parameter_type_list -> parameter_list
Rule 104   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 105   parameter_list -> parameter_declaration
Rule 106   parameter_list -> parameter_list COMMA parameter_declaration
Rule 107   parameter_declaration -> type_specifier declarator
Rule 108   parameter_declaration -> type_specifier abstract_declarator
Rule 109   parameter_declaration -> type_specifier
Rule 110   abstract_declarator -> pointer
Rule 111   abstract_declarator -> pointer direct_abstract_declarator
Rule 112   abstract_declarator -> direct_abstract_declarator
Rule 113   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 114   direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET
Rule 115   direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET
Rule 116   direct_abstract_declarator -> LBRACKET constant_expression RBRACKET
Rule 117   direct_abstract_declarator -> LBRACKET RBRACKET
Rule 118   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 119   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 120   declaration -> type_specifier init_declarator_list SEMI
Rule 121   declaration -> type_specifier SEMI
Rule 122   declaration_list -> declaration
Rule 123   declaration_list -> declaration_list declaration
Rule 124   init_declarator -> declarator
Rule 125   init_declarator -> declarator EQUALS initializer
Rule 126   init_declarator_list -> init_declarator
Rule 127   init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 128   initializer -> assignment_expression
Rule 129   initializer -> LBRACE initializer_list RBRACE
Rule 130   initializer -> LBRACE initializer_list COMMA RBRACE
Rule 131   initializer_list -> initializer
Rule 132   initializer_list -> initializer_list COMMA initializer
Rule 133   compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 134   compound_statement -> LBRACE statement_list RBRACE
Rule 135   compound_statement -> LBRACE declaration_list RBRACE
Rule 136   compound_statement -> LBRACE RBRACE
Rule 137   statement -> expression_statement
Rule 138   statement -> compound_statement
Rule 139   statement -> selection_statement
Rule 140   statement -> iteration_statement
Rule 141   statement -> jump_statement
Rule 142   statement_list -> statement
Rule 143   statement_list -> statement_list statement
Rule 144   expression_statement -> expression SEMI
Rule 145   selection_statement -> IF LPAREN expression RPAREN statement
Rule 146   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 147   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 148   iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
Rule 149   jump_statement -> BREAK SEMI
Rule 150   jump_statement -> RETURN expression SEMI
Rule 151   jump_statement -> RETURN SEMI
Rule 152   argument_expression_list -> assignment_expression
Rule 153   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 154   identifier_list -> ID
Rule 155   identifier_list -> identifier_list COMMA ID
Rule 156   empty -> <empty>

Terminals, with rules where they appear

AND                  : 38 95
ANDEQUAL             : 92
ARROW                : 70
BREAK                : 149
CCONST               : 79
CHAR                 : 7
COLON                : 28
COMMA                : 81 104 106 127 130 132 153 155
CONDOP               : 28
DIVEQUAL             : 86
DIVIDE               : 55
DOUBLE               : 12
ELLIPSIS             : 104
ELSE                 : 146
EQ                   : 40
EQUALS               : 84 125
FCONST               : 78
FLOAT                : 11
FOR                  : 148
GE                   : 46
GT                   : 44
ICONST               : 77
ID                   : 19 69 70 73 154 155
IF                   : 145 146
INT                  : 9
LAND                 : 32
LBRACE               : 129 130 133 134 135 136
LBRACKET             : 21 22 66 114 115 116 117
LE                   : 45
LNOT                 : 100
LONG                 : 10
LOR                  : 30
LPAREN               : 20 23 24 25 58 64 67 68 76 113 118 119 145 146 147 148
LSHIFT               : 48
LSHIFTEQUAL          : 90
LT                   : 43
MINUS                : 52 98
MINUSEQUAL           : 89
MINUSMINUS           : 61 72
MOD                  : 56
MODEQUAL             : 87
NE                   : 41
NOT                  : 99
OR                   : 34
OREQUAL              : 93
PERIOD               : 69
PLUS                 : 51 97
PLUSEQUAL            : 88
PLUSPLUS             : 60 71
RBRACE               : 129 130 133 134 135 136
RBRACKET             : 21 22 66 114 115 116 117
RETURN               : 150 151
RPAREN               : 20 23 24 25 58 64 67 68 76 113 118 119 145 146 147 148
RSHIFT               : 49
RSHIFTEQUAL          : 91
SCONST               : 75
SEMI                 : 120 121 144 148 148 149 150 151
SHORT                : 8
SIGNED               : 13
SIZEOF               : 63 64
TIMES                : 17 18 54 96
TIMESEQUAL           : 85
UNSIGNED             : 14
VOID                 : 6
WHILE                : 147
XOR                  : 36
XOREQUAL             : 94
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 101 108 113
additive_expression  : 47 48 49 51 52
and_expression       : 35 36 38
argument_expression_list : 67 153
assignment_expression : 80 81 83 128 152 153
assignment_operator  : 83
cast_expression      : 53 54 55 56 58 62
compound_statement   : 5 138
conditional_expression : 26 28 82
constant             : 74
constant_expression  : 21 114 116
declaration          : 4 122 123
declaration_list     : 123 133 135
declarator           : 5 20 107 124 125
direct_abstract_declarator : 111 112 114 115 118
direct_declarator    : 15 16 21 22 23 24 25
empty                : 
equality_expression  : 37 38 40 41
exclusive_or_expression : 33 34 36
expression           : 28 66 76 81 144 145 146 147 148 148 148 150
expression_statement : 137
external_declaration : 1 2
function_definition  : 3
identifier_list      : 24 155
inclusive_or_expression : 31 32 34
init_declarator      : 126 127
init_declarator_list : 120 127
initializer          : 125 131 132
initializer_list     : 129 130 132
iteration_statement  : 140
jump_statement       : 141
logical_and_expression : 29 30 32
logical_or_expression : 27 28 30
multiplicative_expression : 50 51 52 54 55 56
parameter_declaration : 105 106
parameter_list       : 103 104 106
parameter_type_list  : 23 118 119
pointer              : 15 18 110 111
postfix_expression   : 59 66 67 68 69 70 71 72
primary_expression   : 65
relational_expression : 39 40 41 43 44 45 46
selection_statement  : 139
shift_expression     : 42 43 44 45 46 48 49
statement            : 142 143 145 146 146 147 148
statement_list       : 133 134 143
translation_unit     : 2 0
type_name            : 58 64
type_specifier       : 5 101 102 107 108 109 120 121
unary_expression     : 57 60 61 63 83
unary_operator       : 62

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier declarator compound_statement
    (120) declaration -> . type_specifier init_declarator_list SEMI
    (121) declaration -> . type_specifier SEMI
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 5

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier declarator compound_statement
    (120) declaration -> . type_specifier init_declarator_list SEMI
    (121) declaration -> . type_specifier SEMI
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14

    external_declaration           shift and go to state 15
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 5

state 2

    (1) translation_unit -> external_declaration .

    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    SHORT           reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    LONG            reduce using rule 3 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    SHORT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    LONG            reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (external_declaration -> declaration .)
    SIGNED          reduce using rule 4 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) function_definition -> type_specifier . declarator compound_statement
    (120) declaration -> type_specifier . init_declarator_list SEMI
    (121) declaration -> type_specifier . SEMI
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (126) init_declarator_list -> . init_declarator
    (127) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (25) direct_declarator -> . direct_declarator LPAREN RPAREN
    (124) init_declarator -> . declarator
    (125) init_declarator -> . declarator EQUALS initializer

    SEMI            shift and go to state 18
    TIMES           shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    declarator                     shift and go to state 16
    init_declarator_list           shift and go to state 17
    pointer                        shift and go to state 19
    direct_declarator              shift and go to state 20
    init_declarator                shift and go to state 21

state 6

    (6) type_specifier -> VOID .

    SEMI            reduce using rule 6 (type_specifier -> VOID .)
    TIMES           reduce using rule 6 (type_specifier -> VOID .)
    ID              reduce using rule 6 (type_specifier -> VOID .)
    LPAREN          reduce using rule 6 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 6 (type_specifier -> VOID .)
    COMMA           reduce using rule 6 (type_specifier -> VOID .)
    RPAREN          reduce using rule 6 (type_specifier -> VOID .)


state 7

    (7) type_specifier -> CHAR .

    SEMI            reduce using rule 7 (type_specifier -> CHAR .)
    TIMES           reduce using rule 7 (type_specifier -> CHAR .)
    ID              reduce using rule 7 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 7 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 7 (type_specifier -> CHAR .)
    COMMA           reduce using rule 7 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 7 (type_specifier -> CHAR .)


state 8

    (8) type_specifier -> SHORT .

    SEMI            reduce using rule 8 (type_specifier -> SHORT .)
    TIMES           reduce using rule 8 (type_specifier -> SHORT .)
    ID              reduce using rule 8 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 8 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 8 (type_specifier -> SHORT .)
    COMMA           reduce using rule 8 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 8 (type_specifier -> SHORT .)


state 9

    (9) type_specifier -> INT .

    SEMI            reduce using rule 9 (type_specifier -> INT .)
    TIMES           reduce using rule 9 (type_specifier -> INT .)
    ID              reduce using rule 9 (type_specifier -> INT .)
    LPAREN          reduce using rule 9 (type_specifier -> INT .)
    LBRACKET        reduce using rule 9 (type_specifier -> INT .)
    COMMA           reduce using rule 9 (type_specifier -> INT .)
    RPAREN          reduce using rule 9 (type_specifier -> INT .)


state 10

    (10) type_specifier -> LONG .

    SEMI            reduce using rule 10 (type_specifier -> LONG .)
    TIMES           reduce using rule 10 (type_specifier -> LONG .)
    ID              reduce using rule 10 (type_specifier -> LONG .)
    LPAREN          reduce using rule 10 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 10 (type_specifier -> LONG .)
    COMMA           reduce using rule 10 (type_specifier -> LONG .)
    RPAREN          reduce using rule 10 (type_specifier -> LONG .)


state 11

    (11) type_specifier -> FLOAT .

    SEMI            reduce using rule 11 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 11 (type_specifier -> FLOAT .)
    ID              reduce using rule 11 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 11 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 11 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 11 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 11 (type_specifier -> FLOAT .)


state 12

    (12) type_specifier -> DOUBLE .

    SEMI            reduce using rule 12 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 12 (type_specifier -> DOUBLE .)
    ID              reduce using rule 12 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 12 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 12 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 12 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 12 (type_specifier -> DOUBLE .)


state 13

    (13) type_specifier -> SIGNED .

    SEMI            reduce using rule 13 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 13 (type_specifier -> SIGNED .)
    ID              reduce using rule 13 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 13 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 13 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 13 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 13 (type_specifier -> SIGNED .)


state 14

    (14) type_specifier -> UNSIGNED .

    SEMI            reduce using rule 14 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 14 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 14 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 14 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 14 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 14 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 14 (type_specifier -> UNSIGNED .)


state 15

    (2) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 16

    (5) function_definition -> type_specifier declarator . compound_statement
    (124) init_declarator -> declarator .
    (125) init_declarator -> declarator . EQUALS initializer
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE

    SEMI            reduce using rule 124 (init_declarator -> declarator .)
    COMMA           reduce using rule 124 (init_declarator -> declarator .)
    EQUALS          shift and go to state 26
    LBRACE          shift and go to state 27

    compound_statement             shift and go to state 25

state 17

    (120) declaration -> type_specifier init_declarator_list . SEMI
    (127) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 28
    COMMA           shift and go to state 29


state 18

    (121) declaration -> type_specifier SEMI .

    VOID            reduce using rule 121 (declaration -> type_specifier SEMI .)
    CHAR            reduce using rule 121 (declaration -> type_specifier SEMI .)
    SHORT           reduce using rule 121 (declaration -> type_specifier SEMI .)
    INT             reduce using rule 121 (declaration -> type_specifier SEMI .)
    LONG            reduce using rule 121 (declaration -> type_specifier SEMI .)
    FLOAT           reduce using rule 121 (declaration -> type_specifier SEMI .)
    DOUBLE          reduce using rule 121 (declaration -> type_specifier SEMI .)
    SIGNED          reduce using rule 121 (declaration -> type_specifier SEMI .)
    UNSIGNED        reduce using rule 121 (declaration -> type_specifier SEMI .)
    $end            reduce using rule 121 (declaration -> type_specifier SEMI .)
    RBRACE          reduce using rule 121 (declaration -> type_specifier SEMI .)
    LBRACE          reduce using rule 121 (declaration -> type_specifier SEMI .)
    IF              reduce using rule 121 (declaration -> type_specifier SEMI .)
    WHILE           reduce using rule 121 (declaration -> type_specifier SEMI .)
    FOR             reduce using rule 121 (declaration -> type_specifier SEMI .)
    BREAK           reduce using rule 121 (declaration -> type_specifier SEMI .)
    RETURN          reduce using rule 121 (declaration -> type_specifier SEMI .)
    PLUSPLUS        reduce using rule 121 (declaration -> type_specifier SEMI .)
    MINUSMINUS      reduce using rule 121 (declaration -> type_specifier SEMI .)
    SIZEOF          reduce using rule 121 (declaration -> type_specifier SEMI .)
    AND             reduce using rule 121 (declaration -> type_specifier SEMI .)
    TIMES           reduce using rule 121 (declaration -> type_specifier SEMI .)
    PLUS            reduce using rule 121 (declaration -> type_specifier SEMI .)
    MINUS           reduce using rule 121 (declaration -> type_specifier SEMI .)
    NOT             reduce using rule 121 (declaration -> type_specifier SEMI .)
    LNOT            reduce using rule 121 (declaration -> type_specifier SEMI .)
    ID              reduce using rule 121 (declaration -> type_specifier SEMI .)
    SCONST          reduce using rule 121 (declaration -> type_specifier SEMI .)
    LPAREN          reduce using rule 121 (declaration -> type_specifier SEMI .)
    ICONST          reduce using rule 121 (declaration -> type_specifier SEMI .)
    FCONST          reduce using rule 121 (declaration -> type_specifier SEMI .)
    CCONST          reduce using rule 121 (declaration -> type_specifier SEMI .)


state 19

    (15) declarator -> pointer . direct_declarator
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (25) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    direct_declarator              shift and go to state 30

state 20

    (16) declarator -> direct_declarator .
    (21) direct_declarator -> direct_declarator . LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (23) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (25) direct_declarator -> direct_declarator . LPAREN RPAREN

    EQUALS          reduce using rule 16 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 16 (declarator -> direct_declarator .)
    SEMI            reduce using rule 16 (declarator -> direct_declarator .)
    COMMA           reduce using rule 16 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 16 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 21

    (126) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 126 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 126 (init_declarator_list -> init_declarator .)


state 22

    (17) pointer -> TIMES .
    (18) pointer -> TIMES . pointer
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer

    ID              reduce using rule 17 (pointer -> TIMES .)
    LPAREN          reduce using rule 17 (pointer -> TIMES .)
    LBRACKET        reduce using rule 17 (pointer -> TIMES .)
    COMMA           reduce using rule 17 (pointer -> TIMES .)
    RPAREN          reduce using rule 17 (pointer -> TIMES .)
    TIMES           shift and go to state 22

    pointer                        shift and go to state 33

state 23

    (19) direct_declarator -> ID .

    LBRACKET        reduce using rule 19 (direct_declarator -> ID .)
    LPAREN          reduce using rule 19 (direct_declarator -> ID .)
    EQUALS          reduce using rule 19 (direct_declarator -> ID .)
    LBRACE          reduce using rule 19 (direct_declarator -> ID .)
    SEMI            reduce using rule 19 (direct_declarator -> ID .)
    COMMA           reduce using rule 19 (direct_declarator -> ID .)
    RPAREN          reduce using rule 19 (direct_declarator -> ID .)


state 24

    (20) direct_declarator -> LPAREN . declarator RPAREN
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (25) direct_declarator -> . direct_declarator LPAREN RPAREN

    TIMES           shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    declarator                     shift and go to state 34
    pointer                        shift and go to state 19
    direct_declarator              shift and go to state 20

state 25

    (5) function_definition -> type_specifier declarator compound_statement .

    VOID            reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    SHORT           reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    LONG            reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    DOUBLE          reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    SIGNED          reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    UNSIGNED        reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)


state 26

    (125) init_declarator -> declarator EQUALS . initializer
    (128) initializer -> . assignment_expression
    (129) initializer -> . LBRACE initializer_list RBRACE
    (130) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 37
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    initializer                    shift and go to state 35
    assignment_expression          shift and go to state 36
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 27

    (133) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (134) compound_statement -> LBRACE . statement_list RBRACE
    (135) compound_statement -> LBRACE . declaration_list RBRACE
    (136) compound_statement -> LBRACE . RBRACE
    (122) declaration_list -> . declaration
    (123) declaration_list -> . declaration_list declaration
    (142) statement_list -> . statement
    (143) statement_list -> . statement_list statement
    (120) declaration -> . type_specifier init_declarator_list SEMI
    (121) declaration -> . type_specifier SEMI
    (137) statement -> . expression_statement
    (138) statement -> . compound_statement
    (139) statement -> . selection_statement
    (140) statement -> . iteration_statement
    (141) statement -> . jump_statement
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED
    (144) expression_statement -> . expression SEMI
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE
    (145) selection_statement -> . IF LPAREN expression RPAREN statement
    (146) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (147) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (148) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (149) jump_statement -> . BREAK SEMI
    (150) jump_statement -> . RETURN expression SEMI
    (151) jump_statement -> . RETURN SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 72
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14
    LBRACE          shift and go to state 27
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    BREAK           shift and go to state 85
    RETURN          shift and go to state 86
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    declaration_list               shift and go to state 70
    statement_list                 shift and go to state 71
    declaration                    shift and go to state 73
    statement                      shift and go to state 74
    type_specifier                 shift and go to state 75
    expression_statement           shift and go to state 76
    compound_statement             shift and go to state 77
    selection_statement            shift and go to state 78
    iteration_statement            shift and go to state 79
    jump_statement                 shift and go to state 80
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 28

    (120) declaration -> type_specifier init_declarator_list SEMI .

    VOID            reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    CHAR            reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    SHORT           reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    INT             reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    LONG            reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    FLOAT           reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    DOUBLE          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    SIGNED          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    $end            reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    RBRACE          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    LBRACE          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    IF              reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    WHILE           reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    FOR             reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    BREAK           reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    RETURN          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    SIZEOF          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    AND             reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    TIMES           reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    PLUS            reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    MINUS           reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    NOT             reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    LNOT            reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    ID              reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    SCONST          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    LPAREN          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    ICONST          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    FCONST          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)
    CCONST          reduce using rule 120 (declaration -> type_specifier init_declarator_list SEMI .)


state 29

    (127) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (124) init_declarator -> . declarator
    (125) init_declarator -> . declarator EQUALS initializer
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (25) direct_declarator -> . direct_declarator LPAREN RPAREN

    TIMES           shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    init_declarator                shift and go to state 88
    declarator                     shift and go to state 89
    pointer                        shift and go to state 19
    direct_declarator              shift and go to state 20

state 30

    (15) declarator -> pointer direct_declarator .
    (21) direct_declarator -> direct_declarator . LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (23) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (25) direct_declarator -> direct_declarator . LPAREN RPAREN

    EQUALS          reduce using rule 15 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 15 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 15 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 15 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 15 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 31

    (21) direct_declarator -> direct_declarator LBRACKET . constant_expression RBRACKET
    (22) direct_declarator -> direct_declarator LBRACKET . RBRACKET
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    RBRACKET        shift and go to state 91
    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    constant_expression            shift and go to state 90
    conditional_expression         shift and go to state 92
    logical_or_expression          shift and go to state 40
    logical_and_expression         shift and go to state 48
    inclusive_or_expression        shift and go to state 57
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 32

    (23) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (24) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (25) direct_declarator -> direct_declarator LPAREN . RPAREN
    (103) parameter_type_list -> . parameter_list
    (104) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (154) identifier_list -> . ID
    (155) identifier_list -> . identifier_list COMMA ID
    (105) parameter_list -> . parameter_declaration
    (106) parameter_list -> . parameter_list COMMA parameter_declaration
    (107) parameter_declaration -> . type_specifier declarator
    (108) parameter_declaration -> . type_specifier abstract_declarator
    (109) parameter_declaration -> . type_specifier
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED

    RPAREN          shift and go to state 96
    ID              shift and go to state 99
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14

    parameter_type_list            shift and go to state 95
    identifier_list                shift and go to state 97
    parameter_list                 shift and go to state 98
    parameter_declaration          shift and go to state 100
    type_specifier                 shift and go to state 101

state 33

    (18) pointer -> TIMES pointer .

    ID              reduce using rule 18 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 18 (pointer -> TIMES pointer .)
    LBRACKET        reduce using rule 18 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 18 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 18 (pointer -> TIMES pointer .)


state 34

    (20) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 102


state 35

    (125) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 125 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 125 (init_declarator -> declarator EQUALS initializer .)


state 36

    (128) initializer -> assignment_expression .

    SEMI            reduce using rule 128 (initializer -> assignment_expression .)
    COMMA           reduce using rule 128 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 128 (initializer -> assignment_expression .)


state 37

    (129) initializer -> LBRACE . initializer_list RBRACE
    (130) initializer -> LBRACE . initializer_list COMMA RBRACE
    (131) initializer_list -> . initializer
    (132) initializer_list -> . initializer_list COMMA initializer
    (128) initializer -> . assignment_expression
    (129) initializer -> . LBRACE initializer_list RBRACE
    (130) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 37
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    initializer_list               shift and go to state 103
    initializer                    shift and go to state 104
    assignment_expression          shift and go to state 36
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 38

    (82) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 82 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 82 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 82 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 82 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 82 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 82 (assignment_expression -> conditional_expression .)


state 39

    (83) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (57) cast_expression -> unary_expression .
    (84) assignment_operator -> . EQUALS
    (85) assignment_operator -> . TIMESEQUAL
    (86) assignment_operator -> . DIVEQUAL
    (87) assignment_operator -> . MODEQUAL
    (88) assignment_operator -> . PLUSEQUAL
    (89) assignment_operator -> . MINUSEQUAL
    (90) assignment_operator -> . LSHIFTEQUAL
    (91) assignment_operator -> . RSHIFTEQUAL
    (92) assignment_operator -> . ANDEQUAL
    (93) assignment_operator -> . OREQUAL
    (94) assignment_operator -> . XOREQUAL

    TIMES           reduce using rule 57 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 57 (cast_expression -> unary_expression .)
    MOD             reduce using rule 57 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 57 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 57 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 57 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 57 (cast_expression -> unary_expression .)
    LT              reduce using rule 57 (cast_expression -> unary_expression .)
    GT              reduce using rule 57 (cast_expression -> unary_expression .)
    LE              reduce using rule 57 (cast_expression -> unary_expression .)
    GE              reduce using rule 57 (cast_expression -> unary_expression .)
    EQ              reduce using rule 57 (cast_expression -> unary_expression .)
    NE              reduce using rule 57 (cast_expression -> unary_expression .)
    AND             reduce using rule 57 (cast_expression -> unary_expression .)
    XOR             reduce using rule 57 (cast_expression -> unary_expression .)
    OR              reduce using rule 57 (cast_expression -> unary_expression .)
    LAND            reduce using rule 57 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 57 (cast_expression -> unary_expression .)
    LOR             reduce using rule 57 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 57 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 57 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 57 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 57 (cast_expression -> unary_expression .)
    COLON           reduce using rule 57 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 57 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 106
    TIMESEQUAL      shift and go to state 107
    DIVEQUAL        shift and go to state 108
    MODEQUAL        shift and go to state 109
    PLUSEQUAL       shift and go to state 110
    MINUSEQUAL      shift and go to state 111
    LSHIFTEQUAL     shift and go to state 112
    RSHIFTEQUAL     shift and go to state 113
    ANDEQUAL        shift and go to state 114
    OREQUAL         shift and go to state 115
    XOREQUAL        shift and go to state 116

    assignment_operator            shift and go to state 105

state 40

    (27) conditional_expression -> logical_or_expression .
    (28) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (30) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    SEMI            reduce using rule 27 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 27 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 27 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 27 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 27 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 27 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 117
    LOR             shift and go to state 118


state 41

    (59) unary_expression -> postfix_expression .
    (66) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (67) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> postfix_expression . LPAREN RPAREN
    (69) postfix_expression -> postfix_expression . PERIOD ID
    (70) postfix_expression -> postfix_expression . ARROW ID
    (71) postfix_expression -> postfix_expression . PLUSPLUS
    (72) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 59 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 59 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 59 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 59 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 59 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 59 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 59 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 59 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 59 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 59 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 59 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 59 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 59 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 59 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 59 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 59 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 59 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 59 (unary_expression -> postfix_expression .)
    LT              reduce using rule 59 (unary_expression -> postfix_expression .)
    GT              reduce using rule 59 (unary_expression -> postfix_expression .)
    LE              reduce using rule 59 (unary_expression -> postfix_expression .)
    GE              reduce using rule 59 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 59 (unary_expression -> postfix_expression .)
    NE              reduce using rule 59 (unary_expression -> postfix_expression .)
    AND             reduce using rule 59 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 59 (unary_expression -> postfix_expression .)
    OR              reduce using rule 59 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 59 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 59 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 59 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 59 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 59 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 59 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 59 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 59 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 59 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 119
    LPAREN          shift and go to state 120
    PERIOD          shift and go to state 121
    ARROW           shift and go to state 122
    PLUSPLUS        shift and go to state 123
    MINUSMINUS      shift and go to state 124


state 42

    (60) unary_expression -> PLUSPLUS . unary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 126
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 43

    (61) unary_expression -> MINUSMINUS . unary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 126
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 44

    (62) unary_expression -> unary_operator . cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 128
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 45

    (53) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 53 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 53 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 53 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 53 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 53 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 53 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 53 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 53 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 53 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 53 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 53 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 53 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 53 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 53 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 53 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 53 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 53 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 53 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 53 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 53 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 53 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 53 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 53 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 53 (multiplicative_expression -> cast_expression .)


state 46

    (63) unary_expression -> SIZEOF . unary_expression
    (64) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 130
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    unary_expression               shift and go to state 129
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 47

    (76) primary_expression -> LPAREN . expression RPAREN
    (58) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (101) type_name -> . type_specifier abstract_declarator
    (102) type_name -> . type_specifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 131
    type_name                      shift and go to state 132
    cast_expression                shift and go to state 45
    assignment_expression          shift and go to state 87
    type_specifier                 shift and go to state 133
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 48

    (29) logical_or_expression -> logical_and_expression .
    (32) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 29 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 29 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 29 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 29 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 29 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 29 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 29 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 29 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 134


state 49

    (65) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 65 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 65 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 65 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 65 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 65 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 65 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 65 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 65 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 65 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 65 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 65 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 65 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 65 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 65 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 65 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 65 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 65 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 65 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 65 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 65 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 65 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 65 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 65 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 65 (postfix_expression -> primary_expression .)
    LT              reduce using rule 65 (postfix_expression -> primary_expression .)
    GT              reduce using rule 65 (postfix_expression -> primary_expression .)
    LE              reduce using rule 65 (postfix_expression -> primary_expression .)
    GE              reduce using rule 65 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 65 (postfix_expression -> primary_expression .)
    NE              reduce using rule 65 (postfix_expression -> primary_expression .)
    AND             reduce using rule 65 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 65 (postfix_expression -> primary_expression .)
    OR              reduce using rule 65 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 65 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 65 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 65 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 65 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 65 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 65 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 65 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 65 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 65 (postfix_expression -> primary_expression .)


state 50

    (73) primary_expression -> ID .

    LBRACKET        reduce using rule 73 (primary_expression -> ID .)
    LPAREN          reduce using rule 73 (primary_expression -> ID .)
    PERIOD          reduce using rule 73 (primary_expression -> ID .)
    ARROW           reduce using rule 73 (primary_expression -> ID .)
    PLUSPLUS        reduce using rule 73 (primary_expression -> ID .)
    MINUSMINUS      reduce using rule 73 (primary_expression -> ID .)
    EQUALS          reduce using rule 73 (primary_expression -> ID .)
    TIMESEQUAL      reduce using rule 73 (primary_expression -> ID .)
    DIVEQUAL        reduce using rule 73 (primary_expression -> ID .)
    MODEQUAL        reduce using rule 73 (primary_expression -> ID .)
    PLUSEQUAL       reduce using rule 73 (primary_expression -> ID .)
    MINUSEQUAL      reduce using rule 73 (primary_expression -> ID .)
    LSHIFTEQUAL     reduce using rule 73 (primary_expression -> ID .)
    RSHIFTEQUAL     reduce using rule 73 (primary_expression -> ID .)
    ANDEQUAL        reduce using rule 73 (primary_expression -> ID .)
    OREQUAL         reduce using rule 73 (primary_expression -> ID .)
    XOREQUAL        reduce using rule 73 (primary_expression -> ID .)
    TIMES           reduce using rule 73 (primary_expression -> ID .)
    DIVIDE          reduce using rule 73 (primary_expression -> ID .)
    MOD             reduce using rule 73 (primary_expression -> ID .)
    PLUS            reduce using rule 73 (primary_expression -> ID .)
    MINUS           reduce using rule 73 (primary_expression -> ID .)
    LSHIFT          reduce using rule 73 (primary_expression -> ID .)
    RSHIFT          reduce using rule 73 (primary_expression -> ID .)
    LT              reduce using rule 73 (primary_expression -> ID .)
    GT              reduce using rule 73 (primary_expression -> ID .)
    LE              reduce using rule 73 (primary_expression -> ID .)
    GE              reduce using rule 73 (primary_expression -> ID .)
    EQ              reduce using rule 73 (primary_expression -> ID .)
    NE              reduce using rule 73 (primary_expression -> ID .)
    AND             reduce using rule 73 (primary_expression -> ID .)
    XOR             reduce using rule 73 (primary_expression -> ID .)
    OR              reduce using rule 73 (primary_expression -> ID .)
    LAND            reduce using rule 73 (primary_expression -> ID .)
    CONDOP          reduce using rule 73 (primary_expression -> ID .)
    LOR             reduce using rule 73 (primary_expression -> ID .)
    SEMI            reduce using rule 73 (primary_expression -> ID .)
    COMMA           reduce using rule 73 (primary_expression -> ID .)
    RBRACKET        reduce using rule 73 (primary_expression -> ID .)
    RBRACE          reduce using rule 73 (primary_expression -> ID .)
    RPAREN          reduce using rule 73 (primary_expression -> ID .)
    COLON           reduce using rule 73 (primary_expression -> ID .)


state 51

    (95) unary_operator -> AND .

    LPAREN          reduce using rule 95 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 95 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 95 (unary_operator -> AND .)
    SIZEOF          reduce using rule 95 (unary_operator -> AND .)
    AND             reduce using rule 95 (unary_operator -> AND .)
    TIMES           reduce using rule 95 (unary_operator -> AND .)
    PLUS            reduce using rule 95 (unary_operator -> AND .)
    MINUS           reduce using rule 95 (unary_operator -> AND .)
    NOT             reduce using rule 95 (unary_operator -> AND .)
    LNOT            reduce using rule 95 (unary_operator -> AND .)
    ID              reduce using rule 95 (unary_operator -> AND .)
    SCONST          reduce using rule 95 (unary_operator -> AND .)
    ICONST          reduce using rule 95 (unary_operator -> AND .)
    FCONST          reduce using rule 95 (unary_operator -> AND .)
    CCONST          reduce using rule 95 (unary_operator -> AND .)


state 52

    (96) unary_operator -> TIMES .

    LPAREN          reduce using rule 96 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 96 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 96 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 96 (unary_operator -> TIMES .)
    AND             reduce using rule 96 (unary_operator -> TIMES .)
    TIMES           reduce using rule 96 (unary_operator -> TIMES .)
    PLUS            reduce using rule 96 (unary_operator -> TIMES .)
    MINUS           reduce using rule 96 (unary_operator -> TIMES .)
    NOT             reduce using rule 96 (unary_operator -> TIMES .)
    LNOT            reduce using rule 96 (unary_operator -> TIMES .)
    ID              reduce using rule 96 (unary_operator -> TIMES .)
    SCONST          reduce using rule 96 (unary_operator -> TIMES .)
    ICONST          reduce using rule 96 (unary_operator -> TIMES .)
    FCONST          reduce using rule 96 (unary_operator -> TIMES .)
    CCONST          reduce using rule 96 (unary_operator -> TIMES .)


state 53

    (97) unary_operator -> PLUS .

    LPAREN          reduce using rule 97 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 97 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 97 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 97 (unary_operator -> PLUS .)
    AND             reduce using rule 97 (unary_operator -> PLUS .)
    TIMES           reduce using rule 97 (unary_operator -> PLUS .)
    PLUS            reduce using rule 97 (unary_operator -> PLUS .)
    MINUS           reduce using rule 97 (unary_operator -> PLUS .)
    NOT             reduce using rule 97 (unary_operator -> PLUS .)
    LNOT            reduce using rule 97 (unary_operator -> PLUS .)
    ID              reduce using rule 97 (unary_operator -> PLUS .)
    SCONST          reduce using rule 97 (unary_operator -> PLUS .)
    ICONST          reduce using rule 97 (unary_operator -> PLUS .)
    FCONST          reduce using rule 97 (unary_operator -> PLUS .)
    CCONST          reduce using rule 97 (unary_operator -> PLUS .)


state 54

    (98) unary_operator -> MINUS .

    LPAREN          reduce using rule 98 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 98 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 98 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 98 (unary_operator -> MINUS .)
    AND             reduce using rule 98 (unary_operator -> MINUS .)
    TIMES           reduce using rule 98 (unary_operator -> MINUS .)
    PLUS            reduce using rule 98 (unary_operator -> MINUS .)
    MINUS           reduce using rule 98 (unary_operator -> MINUS .)
    NOT             reduce using rule 98 (unary_operator -> MINUS .)
    LNOT            reduce using rule 98 (unary_operator -> MINUS .)
    ID              reduce using rule 98 (unary_operator -> MINUS .)
    SCONST          reduce using rule 98 (unary_operator -> MINUS .)
    ICONST          reduce using rule 98 (unary_operator -> MINUS .)
    FCONST          reduce using rule 98 (unary_operator -> MINUS .)
    CCONST          reduce using rule 98 (unary_operator -> MINUS .)


state 55

    (99) unary_operator -> NOT .

    LPAREN          reduce using rule 99 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 99 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 99 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 99 (unary_operator -> NOT .)
    AND             reduce using rule 99 (unary_operator -> NOT .)
    TIMES           reduce using rule 99 (unary_operator -> NOT .)
    PLUS            reduce using rule 99 (unary_operator -> NOT .)
    MINUS           reduce using rule 99 (unary_operator -> NOT .)
    NOT             reduce using rule 99 (unary_operator -> NOT .)
    LNOT            reduce using rule 99 (unary_operator -> NOT .)
    ID              reduce using rule 99 (unary_operator -> NOT .)
    SCONST          reduce using rule 99 (unary_operator -> NOT .)
    ICONST          reduce using rule 99 (unary_operator -> NOT .)
    FCONST          reduce using rule 99 (unary_operator -> NOT .)
    CCONST          reduce using rule 99 (unary_operator -> NOT .)


state 56

    (100) unary_operator -> LNOT .

    LPAREN          reduce using rule 100 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 100 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 100 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 100 (unary_operator -> LNOT .)
    AND             reduce using rule 100 (unary_operator -> LNOT .)
    TIMES           reduce using rule 100 (unary_operator -> LNOT .)
    PLUS            reduce using rule 100 (unary_operator -> LNOT .)
    MINUS           reduce using rule 100 (unary_operator -> LNOT .)
    NOT             reduce using rule 100 (unary_operator -> LNOT .)
    LNOT            reduce using rule 100 (unary_operator -> LNOT .)
    ID              reduce using rule 100 (unary_operator -> LNOT .)
    SCONST          reduce using rule 100 (unary_operator -> LNOT .)
    ICONST          reduce using rule 100 (unary_operator -> LNOT .)
    FCONST          reduce using rule 100 (unary_operator -> LNOT .)
    CCONST          reduce using rule 100 (unary_operator -> LNOT .)


state 57

    (31) logical_and_expression -> inclusive_or_expression .
    (34) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 31 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 135


state 58

    (74) primary_expression -> constant .

    LBRACKET        reduce using rule 74 (primary_expression -> constant .)
    LPAREN          reduce using rule 74 (primary_expression -> constant .)
    PERIOD          reduce using rule 74 (primary_expression -> constant .)
    ARROW           reduce using rule 74 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 74 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 74 (primary_expression -> constant .)
    EQUALS          reduce using rule 74 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 74 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 74 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 74 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 74 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 74 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 74 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 74 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 74 (primary_expression -> constant .)
    OREQUAL         reduce using rule 74 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 74 (primary_expression -> constant .)
    TIMES           reduce using rule 74 (primary_expression -> constant .)
    DIVIDE          reduce using rule 74 (primary_expression -> constant .)
    MOD             reduce using rule 74 (primary_expression -> constant .)
    PLUS            reduce using rule 74 (primary_expression -> constant .)
    MINUS           reduce using rule 74 (primary_expression -> constant .)
    LSHIFT          reduce using rule 74 (primary_expression -> constant .)
    RSHIFT          reduce using rule 74 (primary_expression -> constant .)
    LT              reduce using rule 74 (primary_expression -> constant .)
    GT              reduce using rule 74 (primary_expression -> constant .)
    LE              reduce using rule 74 (primary_expression -> constant .)
    GE              reduce using rule 74 (primary_expression -> constant .)
    EQ              reduce using rule 74 (primary_expression -> constant .)
    NE              reduce using rule 74 (primary_expression -> constant .)
    AND             reduce using rule 74 (primary_expression -> constant .)
    XOR             reduce using rule 74 (primary_expression -> constant .)
    OR              reduce using rule 74 (primary_expression -> constant .)
    LAND            reduce using rule 74 (primary_expression -> constant .)
    CONDOP          reduce using rule 74 (primary_expression -> constant .)
    LOR             reduce using rule 74 (primary_expression -> constant .)
    SEMI            reduce using rule 74 (primary_expression -> constant .)
    COMMA           reduce using rule 74 (primary_expression -> constant .)
    RBRACKET        reduce using rule 74 (primary_expression -> constant .)
    RBRACE          reduce using rule 74 (primary_expression -> constant .)
    RPAREN          reduce using rule 74 (primary_expression -> constant .)
    COLON           reduce using rule 74 (primary_expression -> constant .)


state 59

    (75) primary_expression -> SCONST .

    LBRACKET        reduce using rule 75 (primary_expression -> SCONST .)
    LPAREN          reduce using rule 75 (primary_expression -> SCONST .)
    PERIOD          reduce using rule 75 (primary_expression -> SCONST .)
    ARROW           reduce using rule 75 (primary_expression -> SCONST .)
    PLUSPLUS        reduce using rule 75 (primary_expression -> SCONST .)
    MINUSMINUS      reduce using rule 75 (primary_expression -> SCONST .)
    EQUALS          reduce using rule 75 (primary_expression -> SCONST .)
    TIMESEQUAL      reduce using rule 75 (primary_expression -> SCONST .)
    DIVEQUAL        reduce using rule 75 (primary_expression -> SCONST .)
    MODEQUAL        reduce using rule 75 (primary_expression -> SCONST .)
    PLUSEQUAL       reduce using rule 75 (primary_expression -> SCONST .)
    MINUSEQUAL      reduce using rule 75 (primary_expression -> SCONST .)
    LSHIFTEQUAL     reduce using rule 75 (primary_expression -> SCONST .)
    RSHIFTEQUAL     reduce using rule 75 (primary_expression -> SCONST .)
    ANDEQUAL        reduce using rule 75 (primary_expression -> SCONST .)
    OREQUAL         reduce using rule 75 (primary_expression -> SCONST .)
    XOREQUAL        reduce using rule 75 (primary_expression -> SCONST .)
    TIMES           reduce using rule 75 (primary_expression -> SCONST .)
    DIVIDE          reduce using rule 75 (primary_expression -> SCONST .)
    MOD             reduce using rule 75 (primary_expression -> SCONST .)
    PLUS            reduce using rule 75 (primary_expression -> SCONST .)
    MINUS           reduce using rule 75 (primary_expression -> SCONST .)
    LSHIFT          reduce using rule 75 (primary_expression -> SCONST .)
    RSHIFT          reduce using rule 75 (primary_expression -> SCONST .)
    LT              reduce using rule 75 (primary_expression -> SCONST .)
    GT              reduce using rule 75 (primary_expression -> SCONST .)
    LE              reduce using rule 75 (primary_expression -> SCONST .)
    GE              reduce using rule 75 (primary_expression -> SCONST .)
    EQ              reduce using rule 75 (primary_expression -> SCONST .)
    NE              reduce using rule 75 (primary_expression -> SCONST .)
    AND             reduce using rule 75 (primary_expression -> SCONST .)
    XOR             reduce using rule 75 (primary_expression -> SCONST .)
    OR              reduce using rule 75 (primary_expression -> SCONST .)
    LAND            reduce using rule 75 (primary_expression -> SCONST .)
    CONDOP          reduce using rule 75 (primary_expression -> SCONST .)
    LOR             reduce using rule 75 (primary_expression -> SCONST .)
    SEMI            reduce using rule 75 (primary_expression -> SCONST .)
    COMMA           reduce using rule 75 (primary_expression -> SCONST .)
    RBRACKET        reduce using rule 75 (primary_expression -> SCONST .)
    RBRACE          reduce using rule 75 (primary_expression -> SCONST .)
    RPAREN          reduce using rule 75 (primary_expression -> SCONST .)
    COLON           reduce using rule 75 (primary_expression -> SCONST .)


state 60

    (33) inclusive_or_expression -> exclusive_or_expression .
    (36) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 33 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 136


state 61

    (77) constant -> ICONST .

    LBRACKET        reduce using rule 77 (constant -> ICONST .)
    LPAREN          reduce using rule 77 (constant -> ICONST .)
    PERIOD          reduce using rule 77 (constant -> ICONST .)
    ARROW           reduce using rule 77 (constant -> ICONST .)
    PLUSPLUS        reduce using rule 77 (constant -> ICONST .)
    MINUSMINUS      reduce using rule 77 (constant -> ICONST .)
    EQUALS          reduce using rule 77 (constant -> ICONST .)
    TIMESEQUAL      reduce using rule 77 (constant -> ICONST .)
    DIVEQUAL        reduce using rule 77 (constant -> ICONST .)
    MODEQUAL        reduce using rule 77 (constant -> ICONST .)
    PLUSEQUAL       reduce using rule 77 (constant -> ICONST .)
    MINUSEQUAL      reduce using rule 77 (constant -> ICONST .)
    LSHIFTEQUAL     reduce using rule 77 (constant -> ICONST .)
    RSHIFTEQUAL     reduce using rule 77 (constant -> ICONST .)
    ANDEQUAL        reduce using rule 77 (constant -> ICONST .)
    OREQUAL         reduce using rule 77 (constant -> ICONST .)
    XOREQUAL        reduce using rule 77 (constant -> ICONST .)
    TIMES           reduce using rule 77 (constant -> ICONST .)
    DIVIDE          reduce using rule 77 (constant -> ICONST .)
    MOD             reduce using rule 77 (constant -> ICONST .)
    PLUS            reduce using rule 77 (constant -> ICONST .)
    MINUS           reduce using rule 77 (constant -> ICONST .)
    LSHIFT          reduce using rule 77 (constant -> ICONST .)
    RSHIFT          reduce using rule 77 (constant -> ICONST .)
    LT              reduce using rule 77 (constant -> ICONST .)
    GT              reduce using rule 77 (constant -> ICONST .)
    LE              reduce using rule 77 (constant -> ICONST .)
    GE              reduce using rule 77 (constant -> ICONST .)
    EQ              reduce using rule 77 (constant -> ICONST .)
    NE              reduce using rule 77 (constant -> ICONST .)
    AND             reduce using rule 77 (constant -> ICONST .)
    XOR             reduce using rule 77 (constant -> ICONST .)
    OR              reduce using rule 77 (constant -> ICONST .)
    LAND            reduce using rule 77 (constant -> ICONST .)
    CONDOP          reduce using rule 77 (constant -> ICONST .)
    LOR             reduce using rule 77 (constant -> ICONST .)
    SEMI            reduce using rule 77 (constant -> ICONST .)
    COMMA           reduce using rule 77 (constant -> ICONST .)
    RBRACKET        reduce using rule 77 (constant -> ICONST .)
    RBRACE          reduce using rule 77 (constant -> ICONST .)
    RPAREN          reduce using rule 77 (constant -> ICONST .)
    COLON           reduce using rule 77 (constant -> ICONST .)


state 62

    (78) constant -> FCONST .

    LBRACKET        reduce using rule 78 (constant -> FCONST .)
    LPAREN          reduce using rule 78 (constant -> FCONST .)
    PERIOD          reduce using rule 78 (constant -> FCONST .)
    ARROW           reduce using rule 78 (constant -> FCONST .)
    PLUSPLUS        reduce using rule 78 (constant -> FCONST .)
    MINUSMINUS      reduce using rule 78 (constant -> FCONST .)
    EQUALS          reduce using rule 78 (constant -> FCONST .)
    TIMESEQUAL      reduce using rule 78 (constant -> FCONST .)
    DIVEQUAL        reduce using rule 78 (constant -> FCONST .)
    MODEQUAL        reduce using rule 78 (constant -> FCONST .)
    PLUSEQUAL       reduce using rule 78 (constant -> FCONST .)
    MINUSEQUAL      reduce using rule 78 (constant -> FCONST .)
    LSHIFTEQUAL     reduce using rule 78 (constant -> FCONST .)
    RSHIFTEQUAL     reduce using rule 78 (constant -> FCONST .)
    ANDEQUAL        reduce using rule 78 (constant -> FCONST .)
    OREQUAL         reduce using rule 78 (constant -> FCONST .)
    XOREQUAL        reduce using rule 78 (constant -> FCONST .)
    TIMES           reduce using rule 78 (constant -> FCONST .)
    DIVIDE          reduce using rule 78 (constant -> FCONST .)
    MOD             reduce using rule 78 (constant -> FCONST .)
    PLUS            reduce using rule 78 (constant -> FCONST .)
    MINUS           reduce using rule 78 (constant -> FCONST .)
    LSHIFT          reduce using rule 78 (constant -> FCONST .)
    RSHIFT          reduce using rule 78 (constant -> FCONST .)
    LT              reduce using rule 78 (constant -> FCONST .)
    GT              reduce using rule 78 (constant -> FCONST .)
    LE              reduce using rule 78 (constant -> FCONST .)
    GE              reduce using rule 78 (constant -> FCONST .)
    EQ              reduce using rule 78 (constant -> FCONST .)
    NE              reduce using rule 78 (constant -> FCONST .)
    AND             reduce using rule 78 (constant -> FCONST .)
    XOR             reduce using rule 78 (constant -> FCONST .)
    OR              reduce using rule 78 (constant -> FCONST .)
    LAND            reduce using rule 78 (constant -> FCONST .)
    CONDOP          reduce using rule 78 (constant -> FCONST .)
    LOR             reduce using rule 78 (constant -> FCONST .)
    SEMI            reduce using rule 78 (constant -> FCONST .)
    COMMA           reduce using rule 78 (constant -> FCONST .)
    RBRACKET        reduce using rule 78 (constant -> FCONST .)
    RBRACE          reduce using rule 78 (constant -> FCONST .)
    RPAREN          reduce using rule 78 (constant -> FCONST .)
    COLON           reduce using rule 78 (constant -> FCONST .)


state 63

    (79) constant -> CCONST .

    LBRACKET        reduce using rule 79 (constant -> CCONST .)
    LPAREN          reduce using rule 79 (constant -> CCONST .)
    PERIOD          reduce using rule 79 (constant -> CCONST .)
    ARROW           reduce using rule 79 (constant -> CCONST .)
    PLUSPLUS        reduce using rule 79 (constant -> CCONST .)
    MINUSMINUS      reduce using rule 79 (constant -> CCONST .)
    EQUALS          reduce using rule 79 (constant -> CCONST .)
    TIMESEQUAL      reduce using rule 79 (constant -> CCONST .)
    DIVEQUAL        reduce using rule 79 (constant -> CCONST .)
    MODEQUAL        reduce using rule 79 (constant -> CCONST .)
    PLUSEQUAL       reduce using rule 79 (constant -> CCONST .)
    MINUSEQUAL      reduce using rule 79 (constant -> CCONST .)
    LSHIFTEQUAL     reduce using rule 79 (constant -> CCONST .)
    RSHIFTEQUAL     reduce using rule 79 (constant -> CCONST .)
    ANDEQUAL        reduce using rule 79 (constant -> CCONST .)
    OREQUAL         reduce using rule 79 (constant -> CCONST .)
    XOREQUAL        reduce using rule 79 (constant -> CCONST .)
    TIMES           reduce using rule 79 (constant -> CCONST .)
    DIVIDE          reduce using rule 79 (constant -> CCONST .)
    MOD             reduce using rule 79 (constant -> CCONST .)
    PLUS            reduce using rule 79 (constant -> CCONST .)
    MINUS           reduce using rule 79 (constant -> CCONST .)
    LSHIFT          reduce using rule 79 (constant -> CCONST .)
    RSHIFT          reduce using rule 79 (constant -> CCONST .)
    LT              reduce using rule 79 (constant -> CCONST .)
    GT              reduce using rule 79 (constant -> CCONST .)
    LE              reduce using rule 79 (constant -> CCONST .)
    GE              reduce using rule 79 (constant -> CCONST .)
    EQ              reduce using rule 79 (constant -> CCONST .)
    NE              reduce using rule 79 (constant -> CCONST .)
    AND             reduce using rule 79 (constant -> CCONST .)
    XOR             reduce using rule 79 (constant -> CCONST .)
    OR              reduce using rule 79 (constant -> CCONST .)
    LAND            reduce using rule 79 (constant -> CCONST .)
    CONDOP          reduce using rule 79 (constant -> CCONST .)
    LOR             reduce using rule 79 (constant -> CCONST .)
    SEMI            reduce using rule 79 (constant -> CCONST .)
    COMMA           reduce using rule 79 (constant -> CCONST .)
    RBRACKET        reduce using rule 79 (constant -> CCONST .)
    RBRACE          reduce using rule 79 (constant -> CCONST .)
    RPAREN          reduce using rule 79 (constant -> CCONST .)
    COLON           reduce using rule 79 (constant -> CCONST .)


state 64

    (35) exclusive_or_expression -> and_expression .
    (38) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 35 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 35 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 35 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 35 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 35 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 35 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 35 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 35 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 35 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 35 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 35 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 137


state 65

    (37) and_expression -> equality_expression .
    (40) equality_expression -> equality_expression . EQ relational_expression
    (41) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 37 (and_expression -> equality_expression .)
    XOR             reduce using rule 37 (and_expression -> equality_expression .)
    OR              reduce using rule 37 (and_expression -> equality_expression .)
    LAND            reduce using rule 37 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 37 (and_expression -> equality_expression .)
    LOR             reduce using rule 37 (and_expression -> equality_expression .)
    SEMI            reduce using rule 37 (and_expression -> equality_expression .)
    COMMA           reduce using rule 37 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 37 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 37 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 37 (and_expression -> equality_expression .)
    COLON           reduce using rule 37 (and_expression -> equality_expression .)
    EQ              shift and go to state 138
    NE              shift and go to state 139


state 66

    (39) equality_expression -> relational_expression .
    (43) relational_expression -> relational_expression . LT shift_expression
    (44) relational_expression -> relational_expression . GT shift_expression
    (45) relational_expression -> relational_expression . LE shift_expression
    (46) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 39 (equality_expression -> relational_expression .)
    NE              reduce using rule 39 (equality_expression -> relational_expression .)
    AND             reduce using rule 39 (equality_expression -> relational_expression .)
    XOR             reduce using rule 39 (equality_expression -> relational_expression .)
    OR              reduce using rule 39 (equality_expression -> relational_expression .)
    LAND            reduce using rule 39 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 39 (equality_expression -> relational_expression .)
    LOR             reduce using rule 39 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 39 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 39 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 39 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 39 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 39 (equality_expression -> relational_expression .)
    COLON           reduce using rule 39 (equality_expression -> relational_expression .)
    LT              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    GE              shift and go to state 143


state 67

    (42) relational_expression -> shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 42 (relational_expression -> shift_expression .)
    GT              reduce using rule 42 (relational_expression -> shift_expression .)
    LE              reduce using rule 42 (relational_expression -> shift_expression .)
    GE              reduce using rule 42 (relational_expression -> shift_expression .)
    EQ              reduce using rule 42 (relational_expression -> shift_expression .)
    NE              reduce using rule 42 (relational_expression -> shift_expression .)
    AND             reduce using rule 42 (relational_expression -> shift_expression .)
    XOR             reduce using rule 42 (relational_expression -> shift_expression .)
    OR              reduce using rule 42 (relational_expression -> shift_expression .)
    LAND            reduce using rule 42 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 42 (relational_expression -> shift_expression .)
    LOR             reduce using rule 42 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 42 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 42 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 42 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> shift_expression .)
    COLON           reduce using rule 42 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 145


state 68

    (47) shift_expression -> additive_expression .
    (51) additive_expression -> additive_expression . PLUS multiplicative_expression
    (52) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 47 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 47 (shift_expression -> additive_expression .)
    LT              reduce using rule 47 (shift_expression -> additive_expression .)
    GT              reduce using rule 47 (shift_expression -> additive_expression .)
    LE              reduce using rule 47 (shift_expression -> additive_expression .)
    GE              reduce using rule 47 (shift_expression -> additive_expression .)
    EQ              reduce using rule 47 (shift_expression -> additive_expression .)
    NE              reduce using rule 47 (shift_expression -> additive_expression .)
    AND             reduce using rule 47 (shift_expression -> additive_expression .)
    XOR             reduce using rule 47 (shift_expression -> additive_expression .)
    OR              reduce using rule 47 (shift_expression -> additive_expression .)
    LAND            reduce using rule 47 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 47 (shift_expression -> additive_expression .)
    LOR             reduce using rule 47 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 47 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 47 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 47 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 47 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 47 (shift_expression -> additive_expression .)
    COLON           reduce using rule 47 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147


state 69

    (50) additive_expression -> multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (56) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 50 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 50 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 50 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 50 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 50 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 50 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 50 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 50 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 50 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 50 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 50 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149
    MOD             shift and go to state 150


state 70

    (133) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (135) compound_statement -> LBRACE declaration_list . RBRACE
    (123) declaration_list -> declaration_list . declaration
    (142) statement_list -> . statement
    (143) statement_list -> . statement_list statement
    (120) declaration -> . type_specifier init_declarator_list SEMI
    (121) declaration -> . type_specifier SEMI
    (137) statement -> . expression_statement
    (138) statement -> . compound_statement
    (139) statement -> . selection_statement
    (140) statement -> . iteration_statement
    (141) statement -> . jump_statement
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED
    (144) expression_statement -> . expression SEMI
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE
    (145) selection_statement -> . IF LPAREN expression RPAREN statement
    (146) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (147) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (148) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (149) jump_statement -> . BREAK SEMI
    (150) jump_statement -> . RETURN expression SEMI
    (151) jump_statement -> . RETURN SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 152
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14
    LBRACE          shift and go to state 27
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    BREAK           shift and go to state 85
    RETURN          shift and go to state 86
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    statement_list                 shift and go to state 151
    declaration                    shift and go to state 153
    statement                      shift and go to state 74
    type_specifier                 shift and go to state 75
    expression_statement           shift and go to state 76
    compound_statement             shift and go to state 77
    selection_statement            shift and go to state 78
    iteration_statement            shift and go to state 79
    jump_statement                 shift and go to state 80
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 71

    (134) compound_statement -> LBRACE statement_list . RBRACE
    (143) statement_list -> statement_list . statement
    (137) statement -> . expression_statement
    (138) statement -> . compound_statement
    (139) statement -> . selection_statement
    (140) statement -> . iteration_statement
    (141) statement -> . jump_statement
    (144) expression_statement -> . expression SEMI
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE
    (145) selection_statement -> . IF LPAREN expression RPAREN statement
    (146) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (147) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (148) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (149) jump_statement -> . BREAK SEMI
    (150) jump_statement -> . RETURN expression SEMI
    (151) jump_statement -> . RETURN SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 154
    LBRACE          shift and go to state 27
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    BREAK           shift and go to state 85
    RETURN          shift and go to state 86
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    statement                      shift and go to state 155
    expression_statement           shift and go to state 76
    compound_statement             shift and go to state 77
    selection_statement            shift and go to state 78
    iteration_statement            shift and go to state 79
    jump_statement                 shift and go to state 80
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 72

    (136) compound_statement -> LBRACE RBRACE .

    VOID            reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    CCONST          reduce using rule 136 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 136 (compound_statement -> LBRACE RBRACE .)


state 73

    (122) declaration_list -> declaration .

    RBRACE          reduce using rule 122 (declaration_list -> declaration .)
    VOID            reduce using rule 122 (declaration_list -> declaration .)
    CHAR            reduce using rule 122 (declaration_list -> declaration .)
    SHORT           reduce using rule 122 (declaration_list -> declaration .)
    INT             reduce using rule 122 (declaration_list -> declaration .)
    LONG            reduce using rule 122 (declaration_list -> declaration .)
    FLOAT           reduce using rule 122 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 122 (declaration_list -> declaration .)
    SIGNED          reduce using rule 122 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 122 (declaration_list -> declaration .)
    LBRACE          reduce using rule 122 (declaration_list -> declaration .)
    IF              reduce using rule 122 (declaration_list -> declaration .)
    WHILE           reduce using rule 122 (declaration_list -> declaration .)
    FOR             reduce using rule 122 (declaration_list -> declaration .)
    BREAK           reduce using rule 122 (declaration_list -> declaration .)
    RETURN          reduce using rule 122 (declaration_list -> declaration .)
    PLUSPLUS        reduce using rule 122 (declaration_list -> declaration .)
    MINUSMINUS      reduce using rule 122 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 122 (declaration_list -> declaration .)
    AND             reduce using rule 122 (declaration_list -> declaration .)
    TIMES           reduce using rule 122 (declaration_list -> declaration .)
    PLUS            reduce using rule 122 (declaration_list -> declaration .)
    MINUS           reduce using rule 122 (declaration_list -> declaration .)
    NOT             reduce using rule 122 (declaration_list -> declaration .)
    LNOT            reduce using rule 122 (declaration_list -> declaration .)
    ID              reduce using rule 122 (declaration_list -> declaration .)
    SCONST          reduce using rule 122 (declaration_list -> declaration .)
    LPAREN          reduce using rule 122 (declaration_list -> declaration .)
    ICONST          reduce using rule 122 (declaration_list -> declaration .)
    FCONST          reduce using rule 122 (declaration_list -> declaration .)
    CCONST          reduce using rule 122 (declaration_list -> declaration .)


state 74

    (142) statement_list -> statement .

    RBRACE          reduce using rule 142 (statement_list -> statement .)
    LBRACE          reduce using rule 142 (statement_list -> statement .)
    IF              reduce using rule 142 (statement_list -> statement .)
    WHILE           reduce using rule 142 (statement_list -> statement .)
    FOR             reduce using rule 142 (statement_list -> statement .)
    BREAK           reduce using rule 142 (statement_list -> statement .)
    RETURN          reduce using rule 142 (statement_list -> statement .)
    PLUSPLUS        reduce using rule 142 (statement_list -> statement .)
    MINUSMINUS      reduce using rule 142 (statement_list -> statement .)
    SIZEOF          reduce using rule 142 (statement_list -> statement .)
    AND             reduce using rule 142 (statement_list -> statement .)
    TIMES           reduce using rule 142 (statement_list -> statement .)
    PLUS            reduce using rule 142 (statement_list -> statement .)
    MINUS           reduce using rule 142 (statement_list -> statement .)
    NOT             reduce using rule 142 (statement_list -> statement .)
    LNOT            reduce using rule 142 (statement_list -> statement .)
    ID              reduce using rule 142 (statement_list -> statement .)
    SCONST          reduce using rule 142 (statement_list -> statement .)
    LPAREN          reduce using rule 142 (statement_list -> statement .)
    ICONST          reduce using rule 142 (statement_list -> statement .)
    FCONST          reduce using rule 142 (statement_list -> statement .)
    CCONST          reduce using rule 142 (statement_list -> statement .)


state 75

    (120) declaration -> type_specifier . init_declarator_list SEMI
    (121) declaration -> type_specifier . SEMI
    (126) init_declarator_list -> . init_declarator
    (127) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (124) init_declarator -> . declarator
    (125) init_declarator -> . declarator EQUALS initializer
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (25) direct_declarator -> . direct_declarator LPAREN RPAREN

    SEMI            shift and go to state 18
    TIMES           shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    init_declarator_list           shift and go to state 17
    init_declarator                shift and go to state 21
    declarator                     shift and go to state 89
    pointer                        shift and go to state 19
    direct_declarator              shift and go to state 20

state 76

    (137) statement -> expression_statement .

    RBRACE          reduce using rule 137 (statement -> expression_statement .)
    LBRACE          reduce using rule 137 (statement -> expression_statement .)
    IF              reduce using rule 137 (statement -> expression_statement .)
    WHILE           reduce using rule 137 (statement -> expression_statement .)
    FOR             reduce using rule 137 (statement -> expression_statement .)
    BREAK           reduce using rule 137 (statement -> expression_statement .)
    RETURN          reduce using rule 137 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 137 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 137 (statement -> expression_statement .)
    SIZEOF          reduce using rule 137 (statement -> expression_statement .)
    AND             reduce using rule 137 (statement -> expression_statement .)
    TIMES           reduce using rule 137 (statement -> expression_statement .)
    PLUS            reduce using rule 137 (statement -> expression_statement .)
    MINUS           reduce using rule 137 (statement -> expression_statement .)
    NOT             reduce using rule 137 (statement -> expression_statement .)
    LNOT            reduce using rule 137 (statement -> expression_statement .)
    ID              reduce using rule 137 (statement -> expression_statement .)
    SCONST          reduce using rule 137 (statement -> expression_statement .)
    LPAREN          reduce using rule 137 (statement -> expression_statement .)
    ICONST          reduce using rule 137 (statement -> expression_statement .)
    FCONST          reduce using rule 137 (statement -> expression_statement .)
    CCONST          reduce using rule 137 (statement -> expression_statement .)
    ELSE            reduce using rule 137 (statement -> expression_statement .)


state 77

    (138) statement -> compound_statement .

    RBRACE          reduce using rule 138 (statement -> compound_statement .)
    LBRACE          reduce using rule 138 (statement -> compound_statement .)
    IF              reduce using rule 138 (statement -> compound_statement .)
    WHILE           reduce using rule 138 (statement -> compound_statement .)
    FOR             reduce using rule 138 (statement -> compound_statement .)
    BREAK           reduce using rule 138 (statement -> compound_statement .)
    RETURN          reduce using rule 138 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 138 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 138 (statement -> compound_statement .)
    SIZEOF          reduce using rule 138 (statement -> compound_statement .)
    AND             reduce using rule 138 (statement -> compound_statement .)
    TIMES           reduce using rule 138 (statement -> compound_statement .)
    PLUS            reduce using rule 138 (statement -> compound_statement .)
    MINUS           reduce using rule 138 (statement -> compound_statement .)
    NOT             reduce using rule 138 (statement -> compound_statement .)
    LNOT            reduce using rule 138 (statement -> compound_statement .)
    ID              reduce using rule 138 (statement -> compound_statement .)
    SCONST          reduce using rule 138 (statement -> compound_statement .)
    LPAREN          reduce using rule 138 (statement -> compound_statement .)
    ICONST          reduce using rule 138 (statement -> compound_statement .)
    FCONST          reduce using rule 138 (statement -> compound_statement .)
    CCONST          reduce using rule 138 (statement -> compound_statement .)
    ELSE            reduce using rule 138 (statement -> compound_statement .)


state 78

    (139) statement -> selection_statement .

    RBRACE          reduce using rule 139 (statement -> selection_statement .)
    LBRACE          reduce using rule 139 (statement -> selection_statement .)
    IF              reduce using rule 139 (statement -> selection_statement .)
    WHILE           reduce using rule 139 (statement -> selection_statement .)
    FOR             reduce using rule 139 (statement -> selection_statement .)
    BREAK           reduce using rule 139 (statement -> selection_statement .)
    RETURN          reduce using rule 139 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 139 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 139 (statement -> selection_statement .)
    SIZEOF          reduce using rule 139 (statement -> selection_statement .)
    AND             reduce using rule 139 (statement -> selection_statement .)
    TIMES           reduce using rule 139 (statement -> selection_statement .)
    PLUS            reduce using rule 139 (statement -> selection_statement .)
    MINUS           reduce using rule 139 (statement -> selection_statement .)
    NOT             reduce using rule 139 (statement -> selection_statement .)
    LNOT            reduce using rule 139 (statement -> selection_statement .)
    ID              reduce using rule 139 (statement -> selection_statement .)
    SCONST          reduce using rule 139 (statement -> selection_statement .)
    LPAREN          reduce using rule 139 (statement -> selection_statement .)
    ICONST          reduce using rule 139 (statement -> selection_statement .)
    FCONST          reduce using rule 139 (statement -> selection_statement .)
    CCONST          reduce using rule 139 (statement -> selection_statement .)
    ELSE            reduce using rule 139 (statement -> selection_statement .)


state 79

    (140) statement -> iteration_statement .

    RBRACE          reduce using rule 140 (statement -> iteration_statement .)
    LBRACE          reduce using rule 140 (statement -> iteration_statement .)
    IF              reduce using rule 140 (statement -> iteration_statement .)
    WHILE           reduce using rule 140 (statement -> iteration_statement .)
    FOR             reduce using rule 140 (statement -> iteration_statement .)
    BREAK           reduce using rule 140 (statement -> iteration_statement .)
    RETURN          reduce using rule 140 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 140 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 140 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 140 (statement -> iteration_statement .)
    AND             reduce using rule 140 (statement -> iteration_statement .)
    TIMES           reduce using rule 140 (statement -> iteration_statement .)
    PLUS            reduce using rule 140 (statement -> iteration_statement .)
    MINUS           reduce using rule 140 (statement -> iteration_statement .)
    NOT             reduce using rule 140 (statement -> iteration_statement .)
    LNOT            reduce using rule 140 (statement -> iteration_statement .)
    ID              reduce using rule 140 (statement -> iteration_statement .)
    SCONST          reduce using rule 140 (statement -> iteration_statement .)
    LPAREN          reduce using rule 140 (statement -> iteration_statement .)
    ICONST          reduce using rule 140 (statement -> iteration_statement .)
    FCONST          reduce using rule 140 (statement -> iteration_statement .)
    CCONST          reduce using rule 140 (statement -> iteration_statement .)
    ELSE            reduce using rule 140 (statement -> iteration_statement .)


state 80

    (141) statement -> jump_statement .

    RBRACE          reduce using rule 141 (statement -> jump_statement .)
    LBRACE          reduce using rule 141 (statement -> jump_statement .)
    IF              reduce using rule 141 (statement -> jump_statement .)
    WHILE           reduce using rule 141 (statement -> jump_statement .)
    FOR             reduce using rule 141 (statement -> jump_statement .)
    BREAK           reduce using rule 141 (statement -> jump_statement .)
    RETURN          reduce using rule 141 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 141 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 141 (statement -> jump_statement .)
    SIZEOF          reduce using rule 141 (statement -> jump_statement .)
    AND             reduce using rule 141 (statement -> jump_statement .)
    TIMES           reduce using rule 141 (statement -> jump_statement .)
    PLUS            reduce using rule 141 (statement -> jump_statement .)
    MINUS           reduce using rule 141 (statement -> jump_statement .)
    NOT             reduce using rule 141 (statement -> jump_statement .)
    LNOT            reduce using rule 141 (statement -> jump_statement .)
    ID              reduce using rule 141 (statement -> jump_statement .)
    SCONST          reduce using rule 141 (statement -> jump_statement .)
    LPAREN          reduce using rule 141 (statement -> jump_statement .)
    ICONST          reduce using rule 141 (statement -> jump_statement .)
    FCONST          reduce using rule 141 (statement -> jump_statement .)
    CCONST          reduce using rule 141 (statement -> jump_statement .)
    ELSE            reduce using rule 141 (statement -> jump_statement .)


state 81

    (144) expression_statement -> expression . SEMI
    (81) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 156
    COMMA           shift and go to state 157


state 82

    (145) selection_statement -> IF . LPAREN expression RPAREN statement
    (146) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 158


state 83

    (147) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 159


state 84

    (148) iteration_statement -> FOR . LPAREN expression SEMI expression SEMI expression RPAREN statement

    LPAREN          shift and go to state 160


state 85

    (149) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 161


state 86

    (150) jump_statement -> RETURN . expression SEMI
    (151) jump_statement -> RETURN . SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 163
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 162
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 87

    (80) expression -> assignment_expression .

    SEMI            reduce using rule 80 (expression -> assignment_expression .)
    COMMA           reduce using rule 80 (expression -> assignment_expression .)
    RPAREN          reduce using rule 80 (expression -> assignment_expression .)
    COLON           reduce using rule 80 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 80 (expression -> assignment_expression .)


state 88

    (127) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 127 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 127 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 89

    (124) init_declarator -> declarator .
    (125) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 124 (init_declarator -> declarator .)
    COMMA           reduce using rule 124 (init_declarator -> declarator .)
    EQUALS          shift and go to state 26


state 90

    (21) direct_declarator -> direct_declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 164


state 91

    (22) direct_declarator -> direct_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EQUALS          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LBRACE          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SEMI            reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)


state 92

    (26) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 26 (constant_expression -> conditional_expression .)


state 93

    (57) cast_expression -> unary_expression .

    TIMES           reduce using rule 57 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 57 (cast_expression -> unary_expression .)
    MOD             reduce using rule 57 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 57 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 57 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 57 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 57 (cast_expression -> unary_expression .)
    LT              reduce using rule 57 (cast_expression -> unary_expression .)
    GT              reduce using rule 57 (cast_expression -> unary_expression .)
    LE              reduce using rule 57 (cast_expression -> unary_expression .)
    GE              reduce using rule 57 (cast_expression -> unary_expression .)
    EQ              reduce using rule 57 (cast_expression -> unary_expression .)
    NE              reduce using rule 57 (cast_expression -> unary_expression .)
    AND             reduce using rule 57 (cast_expression -> unary_expression .)
    XOR             reduce using rule 57 (cast_expression -> unary_expression .)
    OR              reduce using rule 57 (cast_expression -> unary_expression .)
    LAND            reduce using rule 57 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 57 (cast_expression -> unary_expression .)
    LOR             reduce using rule 57 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 57 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 57 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 57 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 57 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 57 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 57 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 57 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 57 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 57 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 57 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 57 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 57 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 57 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 57 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 57 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 57 (cast_expression -> unary_expression .)
    COLON           reduce using rule 57 (cast_expression -> unary_expression .)


state 94

    (58) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (76) primary_expression -> LPAREN . expression RPAREN
    (101) type_name -> . type_specifier abstract_declarator
    (102) type_name -> . type_specifier
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    type_name                      shift and go to state 132
    cast_expression                shift and go to state 45
    expression                     shift and go to state 131
    type_specifier                 shift and go to state 133
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 95

    (23) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 165


state 96

    (25) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 25 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 25 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 25 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 25 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 97

    (24) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (155) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 167


state 98

    (103) parameter_type_list -> parameter_list .
    (104) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (106) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 103 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 168


state 99

    (154) identifier_list -> ID .

    RPAREN          reduce using rule 154 (identifier_list -> ID .)
    COMMA           reduce using rule 154 (identifier_list -> ID .)


state 100

    (105) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 105 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 105 (parameter_list -> parameter_declaration .)


state 101

    (107) parameter_declaration -> type_specifier . declarator
    (108) parameter_declaration -> type_specifier . abstract_declarator
    (109) parameter_declaration -> type_specifier .
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (110) abstract_declarator -> . pointer
    (111) abstract_declarator -> . pointer direct_abstract_declarator
    (112) abstract_declarator -> . direct_abstract_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (25) direct_declarator -> . direct_declarator LPAREN RPAREN
    (113) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (114) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (115) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (116) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (117) direct_abstract_declarator -> . LBRACKET RBRACKET
    (118) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (119) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 109 (parameter_declaration -> type_specifier .)
    RPAREN          reduce using rule 109 (parameter_declaration -> type_specifier .)
    TIMES           shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 173
    LBRACKET        shift and go to state 174

    declarator                     shift and go to state 169
    abstract_declarator            shift and go to state 170
    pointer                        shift and go to state 171
    direct_declarator              shift and go to state 20
    direct_abstract_declarator     shift and go to state 172

state 102

    (20) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)


state 103

    (129) initializer -> LBRACE initializer_list . RBRACE
    (130) initializer -> LBRACE initializer_list . COMMA RBRACE
    (132) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 175
    COMMA           shift and go to state 176


state 104

    (131) initializer_list -> initializer .

    RBRACE          reduce using rule 131 (initializer_list -> initializer .)
    COMMA           reduce using rule 131 (initializer_list -> initializer .)


state 105

    (83) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    unary_expression               shift and go to state 39
    assignment_expression          shift and go to state 177
    conditional_expression         shift and go to state 38
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 106

    (84) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 84 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 84 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 84 (assignment_operator -> EQUALS .)
    AND             reduce using rule 84 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 84 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 84 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 84 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 84 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 84 (assignment_operator -> EQUALS .)
    ID              reduce using rule 84 (assignment_operator -> EQUALS .)
    SCONST          reduce using rule 84 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 84 (assignment_operator -> EQUALS .)
    ICONST          reduce using rule 84 (assignment_operator -> EQUALS .)
    FCONST          reduce using rule 84 (assignment_operator -> EQUALS .)
    CCONST          reduce using rule 84 (assignment_operator -> EQUALS .)


state 107

    (85) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    SCONST          reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    ICONST          reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    FCONST          reduce using rule 85 (assignment_operator -> TIMESEQUAL .)
    CCONST          reduce using rule 85 (assignment_operator -> TIMESEQUAL .)


state 108

    (86) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    SCONST          reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    ICONST          reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    FCONST          reduce using rule 86 (assignment_operator -> DIVEQUAL .)
    CCONST          reduce using rule 86 (assignment_operator -> DIVEQUAL .)


state 109

    (87) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 87 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 87 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 87 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 87 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 87 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 87 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 87 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 87 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 87 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 87 (assignment_operator -> MODEQUAL .)
    SCONST          reduce using rule 87 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 87 (assignment_operator -> MODEQUAL .)
    ICONST          reduce using rule 87 (assignment_operator -> MODEQUAL .)
    FCONST          reduce using rule 87 (assignment_operator -> MODEQUAL .)
    CCONST          reduce using rule 87 (assignment_operator -> MODEQUAL .)


state 110

    (88) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    SCONST          reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    ICONST          reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    FCONST          reduce using rule 88 (assignment_operator -> PLUSEQUAL .)
    CCONST          reduce using rule 88 (assignment_operator -> PLUSEQUAL .)


state 111

    (89) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    SCONST          reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    ICONST          reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    FCONST          reduce using rule 89 (assignment_operator -> MINUSEQUAL .)
    CCONST          reduce using rule 89 (assignment_operator -> MINUSEQUAL .)


state 112

    (90) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    SCONST          reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    FCONST          reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)
    CCONST          reduce using rule 90 (assignment_operator -> LSHIFTEQUAL .)


state 113

    (91) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    SCONST          reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    FCONST          reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)
    CCONST          reduce using rule 91 (assignment_operator -> RSHIFTEQUAL .)


state 114

    (92) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    SCONST          reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    ICONST          reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    FCONST          reduce using rule 92 (assignment_operator -> ANDEQUAL .)
    CCONST          reduce using rule 92 (assignment_operator -> ANDEQUAL .)


state 115

    (93) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 93 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 93 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 93 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 93 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 93 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 93 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 93 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 93 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 93 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 93 (assignment_operator -> OREQUAL .)
    SCONST          reduce using rule 93 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 93 (assignment_operator -> OREQUAL .)
    ICONST          reduce using rule 93 (assignment_operator -> OREQUAL .)
    FCONST          reduce using rule 93 (assignment_operator -> OREQUAL .)
    CCONST          reduce using rule 93 (assignment_operator -> OREQUAL .)


state 116

    (94) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 94 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 94 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 94 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 94 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 94 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 94 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 94 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 94 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 94 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 94 (assignment_operator -> XOREQUAL .)
    SCONST          reduce using rule 94 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 94 (assignment_operator -> XOREQUAL .)
    ICONST          reduce using rule 94 (assignment_operator -> XOREQUAL .)
    FCONST          reduce using rule 94 (assignment_operator -> XOREQUAL .)
    CCONST          reduce using rule 94 (assignment_operator -> XOREQUAL .)


state 117

    (28) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    logical_or_expression          shift and go to state 40
    expression                     shift and go to state 178
    conditional_expression         shift and go to state 38
    assignment_expression          shift and go to state 87
    unary_expression               shift and go to state 39
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 118

    (30) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    logical_and_expression         shift and go to state 179
    inclusive_or_expression        shift and go to state 57
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 119

    (66) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    postfix_expression             shift and go to state 41
    expression                     shift and go to state 180
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 120

    (67) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (68) postfix_expression -> postfix_expression LPAREN . RPAREN
    (152) argument_expression_list -> . assignment_expression
    (153) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 182
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    postfix_expression             shift and go to state 41
    argument_expression_list       shift and go to state 181
    assignment_expression          shift and go to state 183
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 121

    (69) postfix_expression -> postfix_expression PERIOD . ID

    ID              shift and go to state 184


state 122

    (70) postfix_expression -> postfix_expression ARROW . ID

    ID              shift and go to state 185


state 123

    (71) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 71 (postfix_expression -> postfix_expression PLUSPLUS .)


state 124

    (72) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 72 (postfix_expression -> postfix_expression MINUSMINUS .)


state 125

    (60) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)


state 126

    (76) primary_expression -> LPAREN . expression RPAREN
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 131
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 127

    (61) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)


state 128

    (62) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)


state 129

    (63) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 63 (unary_expression -> SIZEOF unary_expression .)


state 130

    (64) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (76) primary_expression -> LPAREN . expression RPAREN
    (101) type_name -> . type_specifier abstract_declarator
    (102) type_name -> . type_specifier
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    type_name                      shift and go to state 186
    expression                     shift and go to state 131
    type_specifier                 shift and go to state 133
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 131

    (76) primary_expression -> LPAREN expression . RPAREN
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 187
    COMMA           shift and go to state 157


state 132

    (58) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 188


state 133

    (101) type_name -> type_specifier . abstract_declarator
    (102) type_name -> type_specifier .
    (110) abstract_declarator -> . pointer
    (111) abstract_declarator -> . pointer direct_abstract_declarator
    (112) abstract_declarator -> . direct_abstract_declarator
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (113) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (114) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (115) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (116) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (117) direct_abstract_declarator -> . LBRACKET RBRACKET
    (118) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (119) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 102 (type_name -> type_specifier .)
    TIMES           shift and go to state 22
    LPAREN          shift and go to state 191
    LBRACKET        shift and go to state 174

    abstract_declarator            shift and go to state 189
    pointer                        shift and go to state 190
    direct_abstract_declarator     shift and go to state 172

state 134

    (32) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    inclusive_or_expression        shift and go to state 192
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 135

    (34) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    exclusive_or_expression        shift and go to state 193
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 136

    (36) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    and_expression                 shift and go to state 194
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 137

    (38) and_expression -> and_expression AND . equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 138

    (40) equality_expression -> equality_expression EQ . relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 139

    (41) equality_expression -> equality_expression NE . relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    relational_expression          shift and go to state 197
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 140

    (43) relational_expression -> relational_expression LT . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    shift_expression               shift and go to state 198
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 141

    (44) relational_expression -> relational_expression GT . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    shift_expression               shift and go to state 199
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 142

    (45) relational_expression -> relational_expression LE . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    shift_expression               shift and go to state 200
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 143

    (46) relational_expression -> relational_expression GE . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    shift_expression               shift and go to state 201
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 144

    (48) shift_expression -> shift_expression LSHIFT . additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    additive_expression            shift and go to state 202
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 145

    (49) shift_expression -> shift_expression RSHIFT . additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    additive_expression            shift and go to state 203
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 146

    (51) additive_expression -> additive_expression PLUS . multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    multiplicative_expression      shift and go to state 204
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 147

    (52) additive_expression -> additive_expression MINUS . multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    multiplicative_expression      shift and go to state 205
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 148

    (54) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    cast_expression                shift and go to state 206
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 149

    (55) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    cast_expression                shift and go to state 207
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 150

    (56) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    cast_expression                shift and go to state 208
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 151

    (133) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (143) statement_list -> statement_list . statement
    (137) statement -> . expression_statement
    (138) statement -> . compound_statement
    (139) statement -> . selection_statement
    (140) statement -> . iteration_statement
    (141) statement -> . jump_statement
    (144) expression_statement -> . expression SEMI
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE
    (145) selection_statement -> . IF LPAREN expression RPAREN statement
    (146) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (147) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (148) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (149) jump_statement -> . BREAK SEMI
    (150) jump_statement -> . RETURN expression SEMI
    (151) jump_statement -> . RETURN SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 209
    LBRACE          shift and go to state 27
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    BREAK           shift and go to state 85
    RETURN          shift and go to state 86
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    statement                      shift and go to state 155
    expression_statement           shift and go to state 76
    compound_statement             shift and go to state 77
    selection_statement            shift and go to state 78
    iteration_statement            shift and go to state 79
    jump_statement                 shift and go to state 80
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 152

    (135) compound_statement -> LBRACE declaration_list RBRACE .

    VOID            reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR            reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    SHORT           reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    LONG            reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    FLOAT           reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    DOUBLE          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIGNED          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    UNSIGNED        reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUSPLUS        reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUSMINUS      reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIZEOF          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    AND             reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    TIMES           reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUS            reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    LNOT            reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    SCONST          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    ICONST          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    FCONST          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    CCONST          reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 135 (compound_statement -> LBRACE declaration_list RBRACE .)


state 153

    (123) declaration_list -> declaration_list declaration .

    RBRACE          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 123 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 123 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 123 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 123 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 123 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 123 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 123 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 123 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 123 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 123 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 123 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    PLUSPLUS        reduce using rule 123 (declaration_list -> declaration_list declaration .)
    MINUSMINUS      reduce using rule 123 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 123 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 123 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 123 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 123 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 123 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 123 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 123 (declaration_list -> declaration_list declaration .)
    SCONST          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    ICONST          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    FCONST          reduce using rule 123 (declaration_list -> declaration_list declaration .)
    CCONST          reduce using rule 123 (declaration_list -> declaration_list declaration .)


state 154

    (134) compound_statement -> LBRACE statement_list RBRACE .

    VOID            reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    SHORT           reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    LONG            reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    SIGNED          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    UNSIGNED        reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUSPLUS        reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUSMINUS      reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    SIZEOF          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    AND             reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    CCONST          reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 134 (compound_statement -> LBRACE statement_list RBRACE .)


state 155

    (143) statement_list -> statement_list statement .

    RBRACE          reduce using rule 143 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 143 (statement_list -> statement_list statement .)
    IF              reduce using rule 143 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 143 (statement_list -> statement_list statement .)
    FOR             reduce using rule 143 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 143 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 143 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 143 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 143 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 143 (statement_list -> statement_list statement .)
    AND             reduce using rule 143 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 143 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 143 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 143 (statement_list -> statement_list statement .)
    NOT             reduce using rule 143 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 143 (statement_list -> statement_list statement .)
    ID              reduce using rule 143 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 143 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 143 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 143 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 143 (statement_list -> statement_list statement .)
    CCONST          reduce using rule 143 (statement_list -> statement_list statement .)


state 156

    (144) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 144 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 144 (expression_statement -> expression SEMI .)
    IF              reduce using rule 144 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 144 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 144 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 144 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 144 (expression_statement -> expression SEMI .)
    PLUSPLUS        reduce using rule 144 (expression_statement -> expression SEMI .)
    MINUSMINUS      reduce using rule 144 (expression_statement -> expression SEMI .)
    SIZEOF          reduce using rule 144 (expression_statement -> expression SEMI .)
    AND             reduce using rule 144 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 144 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 144 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 144 (expression_statement -> expression SEMI .)
    NOT             reduce using rule 144 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 144 (expression_statement -> expression SEMI .)
    ID              reduce using rule 144 (expression_statement -> expression SEMI .)
    SCONST          reduce using rule 144 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 144 (expression_statement -> expression SEMI .)
    ICONST          reduce using rule 144 (expression_statement -> expression SEMI .)
    FCONST          reduce using rule 144 (expression_statement -> expression SEMI .)
    CCONST          reduce using rule 144 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 144 (expression_statement -> expression SEMI .)


state 157

    (81) expression -> expression COMMA . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    assignment_expression          shift and go to state 210
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 158

    (145) selection_statement -> IF LPAREN . expression RPAREN statement
    (146) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 211
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 159

    (147) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 212
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 160

    (148) iteration_statement -> FOR LPAREN . expression SEMI expression SEMI expression RPAREN statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 213
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 161

    (149) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 149 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 149 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 149 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 149 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 149 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 149 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 149 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 149 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 149 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 149 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 149 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 149 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 149 (jump_statement -> BREAK SEMI .)
    SCONST          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    ICONST          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    FCONST          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    CCONST          reduce using rule 149 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 149 (jump_statement -> BREAK SEMI .)


state 162

    (150) jump_statement -> RETURN expression . SEMI
    (81) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 214
    COMMA           shift and go to state 157


state 163

    (151) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 151 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 151 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 151 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 151 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 151 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 151 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 151 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 151 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 151 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 151 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 151 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 151 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 151 (jump_statement -> RETURN SEMI .)
    SCONST          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    ICONST          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    FCONST          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    CCONST          reduce using rule 151 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 151 (jump_statement -> RETURN SEMI .)


state 164

    (21) direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 21 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 21 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    EQUALS          reduce using rule 21 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LBRACE          reduce using rule 21 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    SEMI            reduce using rule 21 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 21 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 21 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)


state 165

    (23) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 166

    (24) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 167

    (155) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 215


state 168

    (104) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (106) parameter_list -> parameter_list COMMA . parameter_declaration
    (107) parameter_declaration -> . type_specifier declarator
    (108) parameter_declaration -> . type_specifier abstract_declarator
    (109) parameter_declaration -> . type_specifier
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED

    ELLIPSIS        shift and go to state 216
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14

    parameter_declaration          shift and go to state 217
    type_specifier                 shift and go to state 101

state 169

    (107) parameter_declaration -> type_specifier declarator .

    COMMA           reduce using rule 107 (parameter_declaration -> type_specifier declarator .)
    RPAREN          reduce using rule 107 (parameter_declaration -> type_specifier declarator .)


state 170

    (108) parameter_declaration -> type_specifier abstract_declarator .

    COMMA           reduce using rule 108 (parameter_declaration -> type_specifier abstract_declarator .)
    RPAREN          reduce using rule 108 (parameter_declaration -> type_specifier abstract_declarator .)


state 171

    (15) declarator -> pointer . direct_declarator
    (110) abstract_declarator -> pointer .
    (111) abstract_declarator -> pointer . direct_abstract_declarator
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (25) direct_declarator -> . direct_declarator LPAREN RPAREN
    (113) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (114) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (115) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (116) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (117) direct_abstract_declarator -> . LBRACKET RBRACKET
    (118) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (119) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 110 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 110 (abstract_declarator -> pointer .)
    ID              shift and go to state 23
    LPAREN          shift and go to state 173
    LBRACKET        shift and go to state 174

    direct_declarator              shift and go to state 30
    direct_abstract_declarator     shift and go to state 218

state 172

    (112) abstract_declarator -> direct_abstract_declarator .
    (114) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression RBRACKET
    (115) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (118) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 112 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 112 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 219
    LPAREN          shift and go to state 220


state 173

    (20) direct_declarator -> LPAREN . declarator RPAREN
    (113) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (119) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (15) declarator -> . pointer direct_declarator
    (16) declarator -> . direct_declarator
    (110) abstract_declarator -> . pointer
    (111) abstract_declarator -> . pointer direct_abstract_declarator
    (112) abstract_declarator -> . direct_abstract_declarator
    (103) parameter_type_list -> . parameter_list
    (104) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (22) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (23) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (24) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (25) direct_declarator -> . direct_declarator LPAREN RPAREN
    (113) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (114) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (115) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (116) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (117) direct_abstract_declarator -> . LBRACKET RBRACKET
    (118) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (119) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (105) parameter_list -> . parameter_declaration
    (106) parameter_list -> . parameter_list COMMA parameter_declaration
    (107) parameter_declaration -> . type_specifier declarator
    (108) parameter_declaration -> . type_specifier abstract_declarator
    (109) parameter_declaration -> . type_specifier
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED

    TIMES           shift and go to state 22
    ID              shift and go to state 23
    LPAREN          shift and go to state 173
    LBRACKET        shift and go to state 174
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14

    declarator                     shift and go to state 34
    abstract_declarator            shift and go to state 221
    parameter_type_list            shift and go to state 222
    pointer                        shift and go to state 171
    direct_declarator              shift and go to state 20
    direct_abstract_declarator     shift and go to state 172
    parameter_list                 shift and go to state 98
    parameter_declaration          shift and go to state 100
    type_specifier                 shift and go to state 101

state 174

    (116) direct_abstract_declarator -> LBRACKET . constant_expression RBRACKET
    (117) direct_abstract_declarator -> LBRACKET . RBRACKET
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    RBRACKET        shift and go to state 224
    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    constant_expression            shift and go to state 223
    conditional_expression         shift and go to state 92
    logical_or_expression          shift and go to state 40
    logical_and_expression         shift and go to state 48
    inclusive_or_expression        shift and go to state 57
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 175

    (129) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 129 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 129 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 129 (initializer -> LBRACE initializer_list RBRACE .)


state 176

    (130) initializer -> LBRACE initializer_list COMMA . RBRACE
    (132) initializer_list -> initializer_list COMMA . initializer
    (128) initializer -> . assignment_expression
    (129) initializer -> . LBRACE initializer_list RBRACE
    (130) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 225
    LBRACE          shift and go to state 37
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    initializer                    shift and go to state 226
    assignment_expression          shift and go to state 36
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 177

    (83) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI            reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 178

    (28) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression
    (81) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 227
    COMMA           shift and go to state 157


state 179

    (30) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (32) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 30 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 30 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 30 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 30 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 30 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 30 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 30 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 30 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 134


state 180

    (66) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (81) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 228
    COMMA           shift and go to state 157


state 181

    (67) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (153) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 229
    COMMA           shift and go to state 230


state 182

    (68) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 68 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 183

    (152) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 152 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 152 (argument_expression_list -> assignment_expression .)


state 184

    (69) postfix_expression -> postfix_expression PERIOD ID .

    LBRACKET        reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    LPAREN          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    PERIOD          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    ARROW           reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSPLUS        reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSMINUS      reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUALS          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMESEQUAL      reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVEQUAL        reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    MODEQUAL        reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSEQUAL       reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSEQUAL      reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFTEQUAL     reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFTEQUAL     reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    ANDEQUAL        reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    OREQUAL         reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    XOREQUAL        reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMES           reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDE          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    MOD             reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUS            reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUS           reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFT          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFT          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    LT              reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    GT              reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    LE              reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    GE              reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    EQ              reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    NE              reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    AND             reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    XOR             reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    OR              reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    LAND            reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    CONDOP          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    LOR             reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    SEMI            reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    COMMA           reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACKET        reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACE          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    RPAREN          reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)
    COLON           reduce using rule 69 (postfix_expression -> postfix_expression PERIOD ID .)


state 185

    (70) postfix_expression -> postfix_expression ARROW ID .

    LBRACKET        reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    LPAREN          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    PERIOD          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    ARROW           reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSPLUS        reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSMINUS      reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    EQUALS          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    TIMESEQUAL      reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    DIVEQUAL        reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    MODEQUAL        reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSEQUAL       reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSEQUAL      reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFTEQUAL     reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFTEQUAL     reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    ANDEQUAL        reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    OREQUAL         reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    XOREQUAL        reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    TIMES           reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDE          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    MOD             reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    PLUS            reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    MINUS           reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFT          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFT          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    LT              reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    GT              reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    LE              reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    GE              reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    EQ              reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    NE              reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    AND             reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    XOR             reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    OR              reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    LAND            reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    CONDOP          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    LOR             reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    SEMI            reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    COMMA           reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACKET        reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACE          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    RPAREN          reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)
    COLON           reduce using rule 70 (postfix_expression -> postfix_expression ARROW ID .)


state 186

    (64) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 231


state 187

    (76) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 76 (primary_expression -> LPAREN expression RPAREN .)


state 188

    (58) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    cast_expression                shift and go to state 232
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 189

    (101) type_name -> type_specifier abstract_declarator .

    RPAREN          reduce using rule 101 (type_name -> type_specifier abstract_declarator .)


state 190

    (110) abstract_declarator -> pointer .
    (111) abstract_declarator -> pointer . direct_abstract_declarator
    (113) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (114) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (115) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (116) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (117) direct_abstract_declarator -> . LBRACKET RBRACKET
    (118) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (119) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 110 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 191
    LBRACKET        shift and go to state 174

    direct_abstract_declarator     shift and go to state 218

state 191

    (113) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (119) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (110) abstract_declarator -> . pointer
    (111) abstract_declarator -> . pointer direct_abstract_declarator
    (112) abstract_declarator -> . direct_abstract_declarator
    (103) parameter_type_list -> . parameter_list
    (104) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (17) pointer -> . TIMES
    (18) pointer -> . TIMES pointer
    (113) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (114) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression RBRACKET
    (115) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (116) direct_abstract_declarator -> . LBRACKET constant_expression RBRACKET
    (117) direct_abstract_declarator -> . LBRACKET RBRACKET
    (118) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (119) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (105) parameter_list -> . parameter_declaration
    (106) parameter_list -> . parameter_list COMMA parameter_declaration
    (107) parameter_declaration -> . type_specifier declarator
    (108) parameter_declaration -> . type_specifier abstract_declarator
    (109) parameter_declaration -> . type_specifier
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED

    TIMES           shift and go to state 22
    LPAREN          shift and go to state 191
    LBRACKET        shift and go to state 174
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14

    abstract_declarator            shift and go to state 221
    parameter_type_list            shift and go to state 222
    pointer                        shift and go to state 190
    direct_abstract_declarator     shift and go to state 172
    parameter_list                 shift and go to state 98
    parameter_declaration          shift and go to state 100
    type_specifier                 shift and go to state 101

state 192

    (32) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (34) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONDOP          reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMI            reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 32 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR              shift and go to state 135


state 193

    (34) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (36) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONDOP          reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMI            reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACKET        reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 34 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 136


state 194

    (36) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (38) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMI            reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 36 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 137


state 195

    (38) and_expression -> and_expression AND equality_expression .
    (40) equality_expression -> equality_expression . EQ relational_expression
    (41) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    CONDOP          reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    SEMI            reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 38 (and_expression -> and_expression AND equality_expression .)
    EQ              shift and go to state 138
    NE              shift and go to state 139


state 196

    (40) equality_expression -> equality_expression EQ relational_expression .
    (43) relational_expression -> relational_expression . LT shift_expression
    (44) relational_expression -> relational_expression . GT shift_expression
    (45) relational_expression -> relational_expression . LE shift_expression
    (46) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    XOR             reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    CONDOP          reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 40 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    GE              shift and go to state 143


state 197

    (41) equality_expression -> equality_expression NE relational_expression .
    (43) relational_expression -> relational_expression . LT shift_expression
    (44) relational_expression -> relational_expression . GT shift_expression
    (45) relational_expression -> relational_expression . LE shift_expression
    (46) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    XOR             reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    CONDOP          reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    RBRACE          reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 41 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    GE              shift and go to state 143


state 198

    (43) relational_expression -> relational_expression LT shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    CONDOP          reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    SEMI            reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 43 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 145


state 199

    (44) relational_expression -> relational_expression GT shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    CONDOP          reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    SEMI            reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 145


state 200

    (45) relational_expression -> relational_expression LE shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    XOR             reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    LAND            reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    CONDOP          reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    LOR             reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    SEMI            reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 145


state 201

    (46) relational_expression -> relational_expression GE shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    XOR             reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    LAND            reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    CONDOP          reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    LOR             reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    SEMI            reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    COLON           reduce using rule 46 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 144
    RSHIFT          shift and go to state 145


state 202

    (48) shift_expression -> shift_expression LSHIFT additive_expression .
    (51) additive_expression -> additive_expression . PLUS multiplicative_expression
    (52) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NE              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONDOP          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMI            reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147


state 203

    (49) shift_expression -> shift_expression RSHIFT additive_expression .
    (51) additive_expression -> additive_expression . PLUS multiplicative_expression
    (52) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NE              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONDOP          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMI            reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147


state 204

    (51) additive_expression -> additive_expression PLUS multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (56) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149
    MOD             shift and go to state 150


state 205

    (52) additive_expression -> additive_expression MINUS multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (56) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149
    MOD             shift and go to state 150


state 206

    (54) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE              reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    CONDOP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 54 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 207

    (55) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE              reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONDOP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 208

    (56) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE              reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE              reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ              reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE              reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 209

    (133) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    VOID            reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR            reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SHORT           reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LONG            reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOAT           reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DOUBLE          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIGNED          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UNSIGNED        reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUSPLUS        reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUSMINUS      reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIZEOF          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AND             reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TIMES           reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUS           reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NOT             reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LNOT            reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SCONST          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ICONST          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FCONST          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CCONST          reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 133 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 210

    (81) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 81 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 81 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 81 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 81 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 81 (expression -> expression COMMA assignment_expression .)


state 211

    (145) selection_statement -> IF LPAREN expression . RPAREN statement
    (146) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 233
    COMMA           shift and go to state 157


state 212

    (147) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 234
    COMMA           shift and go to state 157


state 213

    (148) iteration_statement -> FOR LPAREN expression . SEMI expression SEMI expression RPAREN statement
    (81) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 235
    COMMA           shift and go to state 157


state 214

    (150) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    SCONST          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    ICONST          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    FCONST          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    CCONST          reduce using rule 150 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 150 (jump_statement -> RETURN expression SEMI .)


state 215

    (155) identifier_list -> identifier_list COMMA ID .

    RPAREN          reduce using rule 155 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 155 (identifier_list -> identifier_list COMMA ID .)


state 216

    (104) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 104 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 217

    (106) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 106 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 106 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 218

    (111) abstract_declarator -> pointer direct_abstract_declarator .
    (114) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression RBRACKET
    (115) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (118) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 111 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 111 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 219
    LPAREN          shift and go to state 220


state 219

    (114) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . constant_expression RBRACKET
    (115) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . RBRACKET
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    RBRACKET        shift and go to state 237
    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    constant_expression            shift and go to state 236
    conditional_expression         shift and go to state 92
    logical_or_expression          shift and go to state 40
    logical_and_expression         shift and go to state 48
    inclusive_or_expression        shift and go to state 57
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 220

    (118) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (103) parameter_type_list -> . parameter_list
    (104) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (105) parameter_list -> . parameter_declaration
    (106) parameter_list -> . parameter_list COMMA parameter_declaration
    (107) parameter_declaration -> . type_specifier declarator
    (108) parameter_declaration -> . type_specifier abstract_declarator
    (109) parameter_declaration -> . type_specifier
    (6) type_specifier -> . VOID
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . SHORT
    (9) type_specifier -> . INT
    (10) type_specifier -> . LONG
    (11) type_specifier -> . FLOAT
    (12) type_specifier -> . DOUBLE
    (13) type_specifier -> . SIGNED
    (14) type_specifier -> . UNSIGNED

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 9
    LONG            shift and go to state 10
    FLOAT           shift and go to state 11
    DOUBLE          shift and go to state 12
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 14

    parameter_type_list            shift and go to state 238
    parameter_list                 shift and go to state 98
    parameter_declaration          shift and go to state 100
    type_specifier                 shift and go to state 101

state 221

    (113) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 239


state 222

    (119) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 240


state 223

    (116) direct_abstract_declarator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 241


state 224

    (117) direct_abstract_declarator -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 117 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 117 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 117 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 117 (direct_abstract_declarator -> LBRACKET RBRACKET .)


state 225

    (130) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 130 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 130 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 130 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 226

    (132) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 132 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 132 (initializer_list -> initializer_list COMMA initializer .)


state 227

    (28) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST

    LPAREN          shift and go to state 94
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    logical_or_expression          shift and go to state 40
    conditional_expression         shift and go to state 242
    logical_and_expression         shift and go to state 48
    inclusive_or_expression        shift and go to state 57
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    primary_expression             shift and go to state 49
    constant                       shift and go to state 58

state 228

    (66) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 66 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 229

    (67) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 67 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 230

    (153) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    assignment_expression          shift and go to state 243
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 231

    (64) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUALS          reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 64 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 232

    (58) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CONDOP          reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 58 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 233

    (145) selection_statement -> IF LPAREN expression RPAREN . statement
    (146) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (137) statement -> . expression_statement
    (138) statement -> . compound_statement
    (139) statement -> . selection_statement
    (140) statement -> . iteration_statement
    (141) statement -> . jump_statement
    (144) expression_statement -> . expression SEMI
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE
    (145) selection_statement -> . IF LPAREN expression RPAREN statement
    (146) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (147) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (148) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (149) jump_statement -> . BREAK SEMI
    (150) jump_statement -> . RETURN expression SEMI
    (151) jump_statement -> . RETURN SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 27
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    BREAK           shift and go to state 85
    RETURN          shift and go to state 86
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 81
    statement                      shift and go to state 244
    expression_statement           shift and go to state 76
    compound_statement             shift and go to state 77
    selection_statement            shift and go to state 78
    iteration_statement            shift and go to state 79
    jump_statement                 shift and go to state 80
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 234

    (147) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (137) statement -> . expression_statement
    (138) statement -> . compound_statement
    (139) statement -> . selection_statement
    (140) statement -> . iteration_statement
    (141) statement -> . jump_statement
    (144) expression_statement -> . expression SEMI
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE
    (145) selection_statement -> . IF LPAREN expression RPAREN statement
    (146) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (147) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (148) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (149) jump_statement -> . BREAK SEMI
    (150) jump_statement -> . RETURN expression SEMI
    (151) jump_statement -> . RETURN SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 27
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    BREAK           shift and go to state 85
    RETURN          shift and go to state 86
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 81
    statement                      shift and go to state 245
    expression_statement           shift and go to state 76
    compound_statement             shift and go to state 77
    selection_statement            shift and go to state 78
    iteration_statement            shift and go to state 79
    jump_statement                 shift and go to state 80
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 235

    (148) iteration_statement -> FOR LPAREN expression SEMI . expression SEMI expression RPAREN statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 246
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 236

    (114) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 247


state 237

    (115) direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 115 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 115 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 115 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 115 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)


state 238

    (118) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 248


state 239

    (113) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 113 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 113 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 113 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 113 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 240

    (119) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 119 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 119 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 119 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 119 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 241

    (116) direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 116 (direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 116 (direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 116 (direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 116 (direct_abstract_declarator -> LBRACKET constant_expression RBRACKET .)


state 242

    (28) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    SEMI            reduce using rule 28 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 28 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 28 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 28 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 28 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 28 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)


state 243

    (153) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 153 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 153 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 244

    (145) selection_statement -> IF LPAREN expression RPAREN statement .
    (146) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 249

  ! ELSE            [ reduce using rule 145 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 245

    (147) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 147 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 246

    (148) iteration_statement -> FOR LPAREN expression SEMI expression . SEMI expression RPAREN statement
    (81) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 250
    COMMA           shift and go to state 157


state 247

    (114) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 114 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 114 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 114 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 114 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET .)


state 248

    (118) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 118 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 118 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 118 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 118 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 249

    (146) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (137) statement -> . expression_statement
    (138) statement -> . compound_statement
    (139) statement -> . selection_statement
    (140) statement -> . iteration_statement
    (141) statement -> . jump_statement
    (144) expression_statement -> . expression SEMI
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE
    (145) selection_statement -> . IF LPAREN expression RPAREN statement
    (146) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (147) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (148) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (149) jump_statement -> . BREAK SEMI
    (150) jump_statement -> . RETURN expression SEMI
    (151) jump_statement -> . RETURN SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 27
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    BREAK           shift and go to state 85
    RETURN          shift and go to state 86
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 81
    statement                      shift and go to state 251
    expression_statement           shift and go to state 76
    compound_statement             shift and go to state 77
    selection_statement            shift and go to state 78
    iteration_statement            shift and go to state 79
    jump_statement                 shift and go to state 80
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 250

    (148) iteration_statement -> FOR LPAREN expression SEMI expression SEMI . expression RPAREN statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 252
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 251

    (146) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCONST          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ICONST          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FCONST          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CCONST          reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 146 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 252

    (148) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression . RPAREN statement
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 253
    COMMA           shift and go to state 157


state 253

    (148) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN . statement
    (137) statement -> . expression_statement
    (138) statement -> . compound_statement
    (139) statement -> . selection_statement
    (140) statement -> . iteration_statement
    (141) statement -> . jump_statement
    (144) expression_statement -> . expression SEMI
    (133) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (134) compound_statement -> . LBRACE statement_list RBRACE
    (135) compound_statement -> . LBRACE declaration_list RBRACE
    (136) compound_statement -> . LBRACE RBRACE
    (145) selection_statement -> . IF LPAREN expression RPAREN statement
    (146) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (147) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (148) iteration_statement -> . FOR LPAREN expression SEMI expression SEMI expression RPAREN statement
    (149) jump_statement -> . BREAK SEMI
    (150) jump_statement -> . RETURN expression SEMI
    (151) jump_statement -> . RETURN SEMI
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_or_expression
    (28) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) unary_expression -> . SIZEOF unary_expression
    (64) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (29) logical_or_expression -> . logical_and_expression
    (30) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (67) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (68) postfix_expression -> . postfix_expression LPAREN RPAREN
    (69) postfix_expression -> . postfix_expression PERIOD ID
    (70) postfix_expression -> . postfix_expression ARROW ID
    (71) postfix_expression -> . postfix_expression PLUSPLUS
    (72) postfix_expression -> . postfix_expression MINUSMINUS
    (95) unary_operator -> . AND
    (96) unary_operator -> . TIMES
    (97) unary_operator -> . PLUS
    (98) unary_operator -> . MINUS
    (99) unary_operator -> . NOT
    (100) unary_operator -> . LNOT
    (31) logical_and_expression -> . inclusive_or_expression
    (32) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (73) primary_expression -> . ID
    (74) primary_expression -> . constant
    (75) primary_expression -> . SCONST
    (76) primary_expression -> . LPAREN expression RPAREN
    (33) inclusive_or_expression -> . exclusive_or_expression
    (34) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (77) constant -> . ICONST
    (78) constant -> . FCONST
    (79) constant -> . CCONST
    (35) exclusive_or_expression -> . and_expression
    (36) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (37) and_expression -> . equality_expression
    (38) and_expression -> . and_expression AND equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQ relational_expression
    (41) equality_expression -> . equality_expression NE relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LT shift_expression
    (44) relational_expression -> . relational_expression GT shift_expression
    (45) relational_expression -> . relational_expression LE shift_expression
    (46) relational_expression -> . relational_expression GE shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 27
    IF              shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    BREAK           shift and go to state 85
    RETURN          shift and go to state 86
    PLUSPLUS        shift and go to state 42
    MINUSMINUS      shift and go to state 43
    SIZEOF          shift and go to state 46
    AND             shift and go to state 51
    TIMES           shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    LNOT            shift and go to state 56
    ID              shift and go to state 50
    SCONST          shift and go to state 59
    LPAREN          shift and go to state 47
    ICONST          shift and go to state 61
    FCONST          shift and go to state 62
    CCONST          shift and go to state 63

    expression                     shift and go to state 81
    statement                      shift and go to state 254
    expression_statement           shift and go to state 76
    compound_statement             shift and go to state 77
    selection_statement            shift and go to state 78
    iteration_statement            shift and go to state 79
    jump_statement                 shift and go to state 80
    assignment_expression          shift and go to state 87
    conditional_expression         shift and go to state 38
    unary_expression               shift and go to state 39
    logical_or_expression          shift and go to state 40
    postfix_expression             shift and go to state 41
    unary_operator                 shift and go to state 44
    cast_expression                shift and go to state 45
    logical_and_expression         shift and go to state 48
    primary_expression             shift and go to state 49
    inclusive_or_expression        shift and go to state 57
    constant                       shift and go to state 58
    exclusive_or_expression        shift and go to state 60
    and_expression                 shift and go to state 64
    equality_expression            shift and go to state 65
    relational_expression          shift and go to state 66
    shift_expression               shift and go to state 67
    additive_expression            shift and go to state 68
    multiplicative_expression      shift and go to state 69

state 254

    (148) iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    IF              reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    WHILE           reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    FOR             reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    BREAK           reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    RETURN          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    PLUSPLUS        reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    MINUSMINUS      reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    SIZEOF          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    AND             reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    TIMES           reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    PLUS            reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    MINUS           reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    NOT             reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LNOT            reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ID              reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    SCONST          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ICONST          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    FCONST          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    CCONST          reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ELSE            reduce using rule 148 (iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 244 resolved as shift
