
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDEQUAL ARROW BREAK CCONST CHAR COLON COMMA CONDOP DIVEQUAL DIVIDE DOUBLE ELLIPSIS ELSE EQ EQUALS FCONST FLOAT FOR GE GT ICONST ID IF INT LAND LBRACE LBRACKET LE LNOT LONG LOR LPAREN LSHIFT LSHIFTEQUAL LT MINUS MINUSEQUAL MINUSMINUS MOD MODEQUAL NE NOT OR OREQUAL PERIOD PLUS PLUSEQUAL PLUSPLUS RBRACE RBRACKET RETURN RPAREN RSHIFT RSHIFTEQUAL SCONST SEMI SHORT SIGNED SIZEOF TIMES TIMESEQUAL UNSIGNED VOID WHILE XOR XOREQUAL translation_unit : external_declaration\n                         | translation_unit external_declaration  external_declaration : function_definition  external_declaration : declaration  function_definition : type_specifier declarator compound_statement  type_specifier : VOID\n                      | CHAR\n                      | SHORT\n                      | INT\n                      | LONG\n                      | FLOAT\n                      | DOUBLE\n                      | SIGNED\n                      | UNSIGNED\n     declarator : pointer direct_declarator  declarator : direct_declarator  pointer : TIMES  pointer : TIMES pointer  direct_declarator : ID  direct_declarator : LPAREN declarator RPAREN  direct_declarator : direct_declarator LBRACKET constant_expression RBRACKET  direct_declarator : direct_declarator LBRACKET RBRACKET  direct_declarator : direct_declarator LPAREN parameter_type_list RPAREN  direct_declarator : direct_declarator LPAREN identifier_list RPAREN  direct_declarator : direct_declarator LPAREN RPAREN  constant_expression : conditional_expression  conditional_expression : logical_or_expression\n                               | logical_or_expression CONDOP expression COLON conditional_expression  logical_or_expression : logical_and_expression\n                              | logical_or_expression LOR logical_and_expression  logical_and_expression : inclusive_or_expression\n                               | logical_and_expression LAND inclusive_or_expression  inclusive_or_expression : exclusive_or_expression\n                                | inclusive_or_expression OR exclusive_or_expression  exclusive_or_expression :  and_expression\n                                |  exclusive_or_expression XOR and_expression  and_expression : equality_expression\n                       | and_expression AND equality_expression  equality_expression : relational_expression\n                            | equality_expression EQ relational_expression\n                            | equality_expression NE relational_expression  relational_expression : shift_expression\n                              | relational_expression LT shift_expression\n                              | relational_expression GT shift_expression\n                              | relational_expression LE shift_expression\n                              | relational_expression GE shift_expression  shift_expression : additive_expression\n                         | shift_expression LSHIFT additive_expression\n                         | shift_expression RSHIFT additive_expression  additive_expression : multiplicative_expression\n                            | additive_expression PLUS multiplicative_expression\n                            | additive_expression MINUS multiplicative_expression  multiplicative_expression : cast_expression\n                                  | multiplicative_expression TIMES cast_expression\n                                  | multiplicative_expression DIVIDE cast_expression\n                                  | multiplicative_expression MOD cast_expression  cast_expression : unary_expression\n                        | LPAREN type_name RPAREN cast_expression  unary_expression : postfix_expression  unary_expression : PLUSPLUS unary_expression\n                         | MINUSMINUS unary_expression\n                         | unary_operator cast_expression  unary_expression : SIZEOF unary_expression\n                         | SIZEOF LPAREN type_name RPAREN  postfix_expression : primary_expression  postfix_expression : postfix_expression LBRACKET expression RBRACKET  postfix_expression : postfix_expression LPAREN argument_expression_list RPAREN\n                           | postfix_expression LPAREN RPAREN\n     postfix_expression : postfix_expression PERIOD ID\n                           | postfix_expression ARROW ID \n     postfix_expression : postfix_expression PLUSPLUS\n                           | postfix_expression MINUSMINUS\n     primary_expression : ID\n                           | constant\n                           | SCONST\n                           | LPAREN expression RPAREN  constant : ICONST\n                 | FCONST\n                 | CCONST\n     expression : assignment_expression\n                   |  expression COMMA assignment_expression  assignment_expression : conditional_expression\n                              | unary_expression assignment_operator assignment_expression  assignment_operator : EQUALS\n                            | TIMESEQUAL\n                            | DIVEQUAL\n                            | MODEQUAL\n                            | PLUSEQUAL\n                            | MINUSEQUAL\n                            | LSHIFTEQUAL\n                            | RSHIFTEQUAL\n                            | ANDEQUAL\n                            | OREQUAL\n                            | XOREQUAL\n     unary_operator : AND\n                       | TIMES\n                       | PLUS \n                       | MINUS\n                       | NOT\n                       | LNOT \n     type_name : type_specifier abstract_declarator  type_name : type_specifier  parameter_type_list : parameter_list  parameter_type_list : parameter_list COMMA ELLIPSIS  parameter_list : parameter_declaration  parameter_list : parameter_list COMMA parameter_declaration  parameter_declaration : type_specifier declarator  parameter_declaration : type_specifier abstract_declarator  parameter_declaration : type_specifier  abstract_declarator : pointer  abstract_declarator : pointer direct_abstract_declarator  abstract_declarator : direct_abstract_declarator  direct_abstract_declarator : LPAREN abstract_declarator RPAREN  direct_abstract_declarator : direct_abstract_declarator LBRACKET constant_expression RBRACKET  direct_abstract_declarator : direct_abstract_declarator LBRACKET RBRACKET  direct_abstract_declarator : LBRACKET constant_expression RBRACKET  direct_abstract_declarator : LBRACKET RBRACKET  direct_abstract_declarator : direct_abstract_declarator LPAREN parameter_type_list RPAREN  direct_abstract_declarator : LPAREN parameter_type_list RPAREN  declaration : type_specifier init_declarator_list SEMI  declaration : type_specifier SEMI  declaration_list : declaration  declaration_list : declaration_list declaration  init_declarator : declarator  init_declarator : declarator EQUALS initializer  init_declarator_list : init_declarator\n                             | init_declarator_list COMMA init_declarator\n     initializer : assignment_expression  initializer : LBRACE initializer_list RBRACE\n                    | LBRACE initializer_list COMMA RBRACE  initializer_list : initializer  initializer_list : initializer_list COMMA initializer  compound_statement : LBRACE declaration_list statement_list RBRACE  compound_statement : LBRACE statement_list RBRACE  compound_statement : LBRACE declaration_list RBRACE  compound_statement : LBRACE RBRACE  statement : expression_statement\n                  | compound_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement\n     statement_list : statement  statement_list : statement_list statement  expression_statement : expression SEMI  selection_statement : IF LPAREN expression RPAREN statement  selection_statement : IF LPAREN expression RPAREN statement ELSE statement  iteration_statement : WHILE LPAREN expression RPAREN statement  iteration_statement : FOR LPAREN expression SEMI expression SEMI expression RPAREN statement  jump_statement : BREAK SEMI  jump_statement : RETURN expression SEMI  jump_statement : RETURN SEMI argument_expression_list : assignment_expression\n                                | argument_expression_list COMMA assignment_expression\n     identifier_list : ID  identifier_list : identifier_list COMMA ID empty : '
    
_lr_action_items = {'VOID':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[6,6,-1,-3,-4,-2,-121,-5,6,-120,6,6,6,-136,-122,6,6,-135,-123,-134,6,6,6,-133,6,]),'CHAR':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[7,7,-1,-3,-4,-2,-121,-5,7,-120,7,7,7,-136,-122,7,7,-135,-123,-134,7,7,7,-133,7,]),'SHORT':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[8,8,-1,-3,-4,-2,-121,-5,8,-120,8,8,8,-136,-122,8,8,-135,-123,-134,8,8,8,-133,8,]),'INT':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[9,9,-1,-3,-4,-2,-121,-5,9,-120,9,9,9,-136,-122,9,9,-135,-123,-134,9,9,9,-133,9,]),'LONG':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[10,10,-1,-3,-4,-2,-121,-5,10,-120,10,10,10,-136,-122,10,10,-135,-123,-134,10,10,10,-133,10,]),'FLOAT':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[11,11,-1,-3,-4,-2,-121,-5,11,-120,11,11,11,-136,-122,11,11,-135,-123,-134,11,11,11,-133,11,]),'DOUBLE':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[12,12,-1,-3,-4,-2,-121,-5,12,-120,12,12,12,-136,-122,12,12,-135,-123,-134,12,12,12,-133,12,]),'SIGNED':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[13,13,-1,-3,-4,-2,-121,-5,13,-120,13,13,13,-136,-122,13,13,-135,-123,-134,13,13,13,-133,13,]),'UNSIGNED':([0,1,2,3,4,15,18,25,27,28,32,47,70,72,73,94,130,152,153,154,168,173,191,209,220,],[14,14,-1,-3,-4,-2,-121,-5,14,-120,14,14,14,-136,-122,14,14,-135,-123,-134,14,14,14,-133,14,]),'$end':([1,2,3,4,15,18,25,28,72,152,154,209,],[0,-1,-3,-4,-2,-121,-5,-120,-136,-135,-134,-133,]),'SEMI':([5,6,7,8,9,10,11,12,13,14,16,17,20,21,23,30,35,36,38,39,40,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,75,81,85,86,87,88,89,91,93,96,102,123,124,125,127,128,129,162,164,165,166,175,177,179,182,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,213,225,228,229,231,232,242,246,],[18,-6,-7,-8,-9,-10,-11,-12,-13,-14,-124,28,-16,-126,-19,-15,-125,-128,-82,-57,-27,-59,-53,-29,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,18,156,161,163,-80,-127,-124,-22,-57,-25,-20,-71,-72,-60,-61,-62,-63,214,-21,-23,-24,-129,-83,-30,-68,-69,-70,-76,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-81,235,-130,-66,-67,-64,-58,-28,250,]),'TIMES':([5,6,7,8,9,10,11,12,13,14,18,22,24,26,27,28,29,31,37,39,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,58,59,61,62,63,69,70,71,72,73,74,75,76,77,78,79,80,86,93,94,101,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,173,174,176,182,184,185,187,188,191,204,205,206,207,208,209,214,219,227,228,229,230,231,232,233,234,235,244,245,249,250,251,253,254,],[22,-6,-7,-8,-9,-10,-11,-12,-13,-14,-121,22,22,52,52,-120,22,52,52,-57,-59,52,52,52,-53,52,52,-65,-73,-95,-96,-97,-98,-99,-100,-74,-75,-77,-78,-79,148,52,52,-136,-122,-142,22,-137,-138,-139,-140,-141,52,-57,52,22,52,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,52,52,52,52,-71,-72,-60,52,-61,-62,-63,52,22,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-135,-123,-134,-143,-144,52,52,52,52,-149,-151,22,52,52,-68,-69,-70,-76,52,22,148,148,-54,-55,-56,-133,-150,52,52,-66,-67,52,-64,-58,52,52,52,-145,-147,52,52,-146,52,-148,]),'ID':([5,6,7,8,9,10,11,12,13,14,18,19,22,24,26,27,28,29,31,32,33,37,42,43,44,46,47,51,52,53,54,55,56,70,71,72,73,74,75,76,77,78,79,80,86,94,101,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,167,171,173,174,176,188,209,214,219,227,230,233,234,235,244,245,249,250,251,253,254,],[23,-6,-7,-8,-9,-10,-11,-12,-13,-14,-121,23,-17,23,50,50,-120,23,50,99,-18,50,50,50,50,50,50,-95,-96,-97,-98,-99,-100,50,50,-136,-122,-142,23,-137,-138,-139,-140,-141,50,50,23,50,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,50,50,50,50,184,185,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-135,-123,-134,-143,-144,50,50,50,50,-149,-151,215,23,23,50,50,50,-133,-150,50,50,50,50,50,50,-145,-147,50,50,-146,50,-148,]),'LPAREN':([5,6,7,8,9,10,11,12,13,14,18,19,20,22,23,24,26,27,28,29,30,31,33,37,41,42,43,44,46,47,49,50,51,52,53,54,55,56,58,59,61,62,63,70,71,72,73,74,75,76,77,78,79,80,82,83,84,86,91,94,96,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,126,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,171,172,173,174,176,182,184,185,187,188,190,191,209,214,218,219,224,227,228,229,230,233,234,235,237,239,240,241,244,245,247,248,249,250,251,253,254,],[24,-6,-7,-8,-9,-10,-11,-12,-13,-14,-121,24,32,-17,-19,24,47,47,-120,24,32,94,-18,47,120,126,126,94,130,47,-65,-73,-95,-96,-97,-98,-99,-100,-74,-75,-77,-78,-79,47,47,-136,-122,-142,24,-137,-138,-139,-140,-141,158,159,160,47,-22,47,-25,173,-20,47,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,47,94,47,47,-71,-72,47,47,191,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,47,-135,-123,-134,-143,-144,47,47,47,47,-149,-151,-21,-23,-24,173,220,173,94,47,-68,-69,-70,-76,94,191,191,-133,-150,220,94,-117,94,-66,-67,47,47,47,47,-115,-113,-119,-116,-145,-147,-114,-118,47,47,-146,47,-148,]),'LBRACKET':([6,7,8,9,10,11,12,13,14,20,22,23,30,33,41,49,50,58,59,61,62,63,91,96,101,102,123,124,133,164,165,166,171,172,173,182,184,185,187,190,191,218,224,228,229,237,239,240,241,247,248,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,31,-17,-19,31,-18,119,-65,-73,-74,-75,-77,-78,-79,-22,-25,174,-20,-71,-72,174,-21,-23,-24,174,219,174,-68,-69,-70,-76,174,174,219,-117,-66,-67,-115,-113,-119,-116,-114,-118,]),'COMMA':([6,7,8,9,10,11,12,13,14,16,17,20,21,22,23,30,33,35,36,38,39,40,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,81,87,88,89,91,93,96,97,98,99,100,101,102,103,104,123,124,125,127,128,129,131,162,164,165,166,169,170,171,172,175,177,178,179,180,181,182,183,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,212,213,215,217,218,224,225,226,228,229,231,232,237,239,240,241,242,243,246,247,248,252,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,-124,29,-16,-126,-17,-19,-15,-18,-125,-128,-82,-57,-27,-59,-53,-29,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,157,-80,-127,-124,-22,-57,-25,167,168,-154,-105,-109,-20,176,-131,-71,-72,-60,-61,-62,-63,157,157,-21,-23,-24,-107,-108,-110,-112,-129,-83,157,-30,157,230,-68,-152,-69,-70,-76,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-81,157,157,157,-155,-106,-111,-117,-130,-132,-66,-67,-64,-58,-115,-113,-119,-116,-28,-153,157,-114,-118,157,]),'RPAREN':([6,7,8,9,10,11,12,13,14,20,22,23,30,32,33,34,38,39,40,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,87,91,93,95,96,97,98,99,100,101,102,120,123,124,125,127,128,129,131,132,133,164,165,166,169,170,171,172,177,179,181,182,183,184,185,186,187,189,190,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,212,215,216,217,218,221,222,224,228,229,231,232,237,238,239,240,241,242,243,247,248,252,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,-17,-19,-15,96,-18,102,-82,-57,-27,-59,-53,-29,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,-80,-22,-57,165,-25,166,-103,-154,-105,-109,-20,182,-71,-72,-60,-61,-62,-63,187,188,-102,-21,-23,-24,-107,-108,-110,-112,-83,-30,229,-68,-152,-69,-70,231,-76,-101,-110,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-81,233,234,-155,-104,-106,-111,239,240,-117,-66,-67,-64,-58,-115,248,-113,-119,-116,-28,-153,-114,-118,253,]),'EQUALS':([16,20,23,30,39,41,49,50,58,59,61,62,63,89,91,93,96,102,123,124,125,127,128,129,164,165,166,182,184,185,187,228,229,231,232,],[26,-16,-19,-15,106,-59,-65,-73,-74,-75,-77,-78,-79,26,-22,-57,-25,-20,-71,-72,-60,-61,-62,-63,-21,-23,-24,-68,-69,-70,-76,-66,-67,-64,-58,]),'LBRACE':([16,18,20,23,26,27,28,30,37,70,71,72,73,74,76,77,78,79,80,91,96,102,151,152,153,154,155,156,161,163,164,165,166,176,209,214,233,234,244,245,249,251,253,254,],[27,-121,-16,-19,37,27,-120,-15,37,27,27,-136,-122,-142,-137,-138,-139,-140,-141,-22,-25,-20,27,-135,-123,-134,-143,-144,-149,-151,-21,-23,-24,37,-133,-150,27,27,-145,-147,27,-146,27,-148,]),'RBRACE':([18,27,28,36,38,39,40,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,93,103,104,123,124,125,127,128,129,151,152,153,154,155,156,161,163,175,176,177,179,182,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,225,226,228,229,231,232,242,244,245,251,254,],[-121,72,-120,-128,-82,-57,-27,-59,-53,-29,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,152,154,-136,-122,-142,-137,-138,-139,-140,-141,-57,175,-131,-71,-72,-60,-61,-62,-63,209,-135,-123,-134,-143,-144,-149,-151,-129,225,-83,-30,-68,-69,-70,-76,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-133,-150,-130,-132,-66,-67,-64,-58,-28,-145,-147,-146,-148,]),'IF':([18,27,28,70,71,72,73,74,76,77,78,79,80,151,152,153,154,155,156,161,163,209,214,233,234,244,245,249,251,253,254,],[-121,82,-120,82,82,-136,-122,-142,-137,-138,-139,-140,-141,82,-135,-123,-134,-143,-144,-149,-151,-133,-150,82,82,-145,-147,82,-146,82,-148,]),'WHILE':([18,27,28,70,71,72,73,74,76,77,78,79,80,151,152,153,154,155,156,161,163,209,214,233,234,244,245,249,251,253,254,],[-121,83,-120,83,83,-136,-122,-142,-137,-138,-139,-140,-141,83,-135,-123,-134,-143,-144,-149,-151,-133,-150,83,83,-145,-147,83,-146,83,-148,]),'FOR':([18,27,28,70,71,72,73,74,76,77,78,79,80,151,152,153,154,155,156,161,163,209,214,233,234,244,245,249,251,253,254,],[-121,84,-120,84,84,-136,-122,-142,-137,-138,-139,-140,-141,84,-135,-123,-134,-143,-144,-149,-151,-133,-150,84,84,-145,-147,84,-146,84,-148,]),'BREAK':([18,27,28,70,71,72,73,74,76,77,78,79,80,151,152,153,154,155,156,161,163,209,214,233,234,244,245,249,251,253,254,],[-121,85,-120,85,85,-136,-122,-142,-137,-138,-139,-140,-141,85,-135,-123,-134,-143,-144,-149,-151,-133,-150,85,85,-145,-147,85,-146,85,-148,]),'RETURN':([18,27,28,70,71,72,73,74,76,77,78,79,80,151,152,153,154,155,156,161,163,209,214,233,234,244,245,249,251,253,254,],[-121,86,-120,86,86,-136,-122,-142,-137,-138,-139,-140,-141,86,-135,-123,-134,-143,-144,-149,-151,-133,-150,86,86,-145,-147,86,-146,86,-148,]),'PLUSPLUS':([18,26,27,28,31,37,41,42,43,44,46,47,49,50,51,52,53,54,55,56,58,59,61,62,63,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,182,184,185,187,188,209,214,219,227,228,229,230,233,234,235,244,245,249,250,251,253,254,],[-121,42,42,-120,42,42,123,42,42,42,42,42,-65,-73,-95,-96,-97,-98,-99,-100,-74,-75,-77,-78,-79,42,42,-136,-122,-142,-137,-138,-139,-140,-141,42,42,42,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,42,42,42,42,-71,-72,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-135,-123,-134,-143,-144,42,42,42,42,-149,-151,42,42,-68,-69,-70,-76,42,-133,-150,42,42,-66,-67,42,42,42,42,-145,-147,42,42,-146,42,-148,]),'MINUSMINUS':([18,26,27,28,31,37,41,42,43,44,46,47,49,50,51,52,53,54,55,56,58,59,61,62,63,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,182,184,185,187,188,209,214,219,227,228,229,230,233,234,235,244,245,249,250,251,253,254,],[-121,43,43,-120,43,43,124,43,43,43,43,43,-65,-73,-95,-96,-97,-98,-99,-100,-74,-75,-77,-78,-79,43,43,-136,-122,-142,-137,-138,-139,-140,-141,43,43,43,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,43,43,43,43,-71,-72,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-135,-123,-134,-143,-144,43,43,43,43,-149,-151,43,43,-68,-69,-70,-76,43,-133,-150,43,43,-66,-67,43,43,43,43,-145,-147,43,43,-146,43,-148,]),'SIZEOF':([18,26,27,28,31,37,42,43,44,46,47,51,52,53,54,55,56,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,188,209,214,219,227,230,233,234,235,244,245,249,250,251,253,254,],[-121,46,46,-120,46,46,46,46,46,46,46,-95,-96,-97,-98,-99,-100,46,46,-136,-122,-142,-137,-138,-139,-140,-141,46,46,46,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-135,-123,-134,-143,-144,46,46,46,46,-149,-151,46,46,46,-133,-150,46,46,46,46,46,46,-145,-147,46,46,-146,46,-148,]),'AND':([18,26,27,28,31,37,39,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,86,93,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,182,184,185,187,188,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,219,227,228,229,230,231,232,233,234,235,244,245,249,250,251,253,254,],[-121,51,51,-120,51,51,-57,-59,51,51,51,-53,51,51,-65,-73,-95,-96,-97,-98,-99,-100,-74,-75,-77,-78,-79,137,-37,-39,-42,-47,-50,51,51,-136,-122,-142,-137,-138,-139,-140,-141,51,-57,51,51,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,51,51,51,51,-71,-72,-60,51,-61,-62,-63,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-135,-123,-134,-143,-144,51,51,51,51,-149,-151,51,51,-68,-69,-70,-76,51,137,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-133,-150,51,51,-66,-67,51,-64,-58,51,51,51,-145,-147,51,51,-146,51,-148,]),'PLUS':([18,26,27,28,31,37,39,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,58,59,61,62,63,68,69,70,71,72,73,74,76,77,78,79,80,86,93,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,182,184,185,187,188,202,203,204,205,206,207,208,209,214,219,227,228,229,230,231,232,233,234,235,244,245,249,250,251,253,254,],[-121,53,53,-120,53,53,-57,-59,53,53,53,-53,53,53,-65,-73,-95,-96,-97,-98,-99,-100,-74,-75,-77,-78,-79,146,-50,53,53,-136,-122,-142,-137,-138,-139,-140,-141,53,-57,53,53,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,53,53,53,53,-71,-72,-60,53,-61,-62,-63,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-135,-123,-134,-143,-144,53,53,53,53,-149,-151,53,53,-68,-69,-70,-76,53,146,146,-51,-52,-54,-55,-56,-133,-150,53,53,-66,-67,53,-64,-58,53,53,53,-145,-147,53,53,-146,53,-148,]),'MINUS':([18,26,27,28,31,37,39,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,58,59,61,62,63,68,69,70,71,72,73,74,76,77,78,79,80,86,93,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,182,184,185,187,188,202,203,204,205,206,207,208,209,214,219,227,228,229,230,231,232,233,234,235,244,245,249,250,251,253,254,],[-121,54,54,-120,54,54,-57,-59,54,54,54,-53,54,54,-65,-73,-95,-96,-97,-98,-99,-100,-74,-75,-77,-78,-79,147,-50,54,54,-136,-122,-142,-137,-138,-139,-140,-141,54,-57,54,54,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,54,54,54,54,-71,-72,-60,54,-61,-62,-63,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-135,-123,-134,-143,-144,54,54,54,54,-149,-151,54,54,-68,-69,-70,-76,54,147,147,-51,-52,-54,-55,-56,-133,-150,54,54,-66,-67,54,-64,-58,54,54,54,-145,-147,54,54,-146,54,-148,]),'NOT':([18,26,27,28,31,37,42,43,44,46,47,51,52,53,54,55,56,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,188,209,214,219,227,230,233,234,235,244,245,249,250,251,253,254,],[-121,55,55,-120,55,55,55,55,55,55,55,-95,-96,-97,-98,-99,-100,55,55,-136,-122,-142,-137,-138,-139,-140,-141,55,55,55,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-135,-123,-134,-143,-144,55,55,55,55,-149,-151,55,55,55,-133,-150,55,55,55,55,55,55,-145,-147,55,55,-146,55,-148,]),'LNOT':([18,26,27,28,31,37,42,43,44,46,47,51,52,53,54,55,56,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,188,209,214,219,227,230,233,234,235,244,245,249,250,251,253,254,],[-121,56,56,-120,56,56,56,56,56,56,56,-95,-96,-97,-98,-99,-100,56,56,-136,-122,-142,-137,-138,-139,-140,-141,56,56,56,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-135,-123,-134,-143,-144,56,56,56,56,-149,-151,56,56,56,-133,-150,56,56,56,56,56,56,-145,-147,56,56,-146,56,-148,]),'SCONST':([18,26,27,28,31,37,42,43,44,46,47,51,52,53,54,55,56,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,188,209,214,219,227,230,233,234,235,244,245,249,250,251,253,254,],[-121,59,59,-120,59,59,59,59,59,59,59,-95,-96,-97,-98,-99,-100,59,59,-136,-122,-142,-137,-138,-139,-140,-141,59,59,59,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-135,-123,-134,-143,-144,59,59,59,59,-149,-151,59,59,59,-133,-150,59,59,59,59,59,59,-145,-147,59,59,-146,59,-148,]),'ICONST':([18,26,27,28,31,37,42,43,44,46,47,51,52,53,54,55,56,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,188,209,214,219,227,230,233,234,235,244,245,249,250,251,253,254,],[-121,61,61,-120,61,61,61,61,61,61,61,-95,-96,-97,-98,-99,-100,61,61,-136,-122,-142,-137,-138,-139,-140,-141,61,61,61,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-135,-123,-134,-143,-144,61,61,61,61,-149,-151,61,61,61,-133,-150,61,61,61,61,61,61,-145,-147,61,61,-146,61,-148,]),'FCONST':([18,26,27,28,31,37,42,43,44,46,47,51,52,53,54,55,56,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,188,209,214,219,227,230,233,234,235,244,245,249,250,251,253,254,],[-121,62,62,-120,62,62,62,62,62,62,62,-95,-96,-97,-98,-99,-100,62,62,-136,-122,-142,-137,-138,-139,-140,-141,62,62,62,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-135,-123,-134,-143,-144,62,62,62,62,-149,-151,62,62,62,-133,-150,62,62,62,62,62,62,-145,-147,62,62,-146,62,-148,]),'CCONST':([18,26,27,28,31,37,42,43,44,46,47,51,52,53,54,55,56,70,71,72,73,74,76,77,78,79,80,86,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,174,176,188,209,214,219,227,230,233,234,235,244,245,249,250,251,253,254,],[-121,63,63,-120,63,63,63,63,63,63,63,-95,-96,-97,-98,-99,-100,63,63,-136,-122,-142,-137,-138,-139,-140,-141,63,63,63,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-135,-123,-134,-143,-144,63,63,63,63,-149,-151,63,63,63,-133,-150,63,63,63,63,63,63,-145,-147,63,63,-146,63,-148,]),'RBRACKET':([31,38,39,40,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,87,90,92,93,123,124,125,127,128,129,174,177,179,180,182,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,223,228,229,231,232,236,242,],[91,-82,-57,-27,-59,-53,-29,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,-80,164,-26,-57,-71,-72,-60,-61,-62,-63,224,-83,-30,228,-68,-69,-70,-76,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-81,237,241,-66,-67,-64,-58,247,-28,]),'COLON':([38,39,40,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,87,93,123,124,125,127,128,129,177,178,179,182,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,228,229,231,232,242,],[-82,-57,-27,-59,-53,-29,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,-80,-57,-71,-72,-60,-61,-62,-63,-83,227,-30,-68,-69,-70,-76,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-81,-66,-67,-64,-58,-28,]),'DIVIDE':([39,41,45,49,50,58,59,61,62,63,69,93,123,124,125,127,128,129,182,184,185,187,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,149,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,149,149,-54,-55,-56,-66,-67,-64,-58,]),'MOD':([39,41,45,49,50,58,59,61,62,63,69,93,123,124,125,127,128,129,182,184,185,187,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,150,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,150,150,-54,-55,-56,-66,-67,-64,-58,]),'LSHIFT':([39,41,45,49,50,58,59,61,62,63,67,68,69,93,123,124,125,127,128,129,182,184,185,187,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,144,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,144,144,144,144,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'RSHIFT':([39,41,45,49,50,58,59,61,62,63,67,68,69,93,123,124,125,127,128,129,182,184,185,187,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,145,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,145,145,145,145,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'LT':([39,41,45,49,50,58,59,61,62,63,66,67,68,69,93,123,124,125,127,128,129,182,184,185,187,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,140,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,140,140,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'GT':([39,41,45,49,50,58,59,61,62,63,66,67,68,69,93,123,124,125,127,128,129,182,184,185,187,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,141,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,141,141,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'LE':([39,41,45,49,50,58,59,61,62,63,66,67,68,69,93,123,124,125,127,128,129,182,184,185,187,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,142,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,142,142,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'GE':([39,41,45,49,50,58,59,61,62,63,66,67,68,69,93,123,124,125,127,128,129,182,184,185,187,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,143,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,143,143,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'EQ':([39,41,45,49,50,58,59,61,62,63,65,66,67,68,69,93,123,124,125,127,128,129,182,184,185,187,195,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,138,-39,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,138,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'NE':([39,41,45,49,50,58,59,61,62,63,65,66,67,68,69,93,123,124,125,127,128,129,182,184,185,187,195,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,-77,-78,-79,139,-39,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,139,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'XOR':([39,41,45,49,50,58,59,60,61,62,63,64,65,66,67,68,69,93,123,124,125,127,128,129,182,184,185,187,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,-74,-75,136,-77,-78,-79,-35,-37,-39,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,136,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'OR':([39,41,45,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,93,123,124,125,127,128,129,182,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,-65,-73,135,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,135,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'LAND':([39,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,93,123,124,125,127,128,129,179,182,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,-59,-53,134,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,134,-68,-69,-70,-76,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'CONDOP':([39,40,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,93,123,124,125,127,128,129,179,182,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,117,-59,-53,-29,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-30,-68,-69,-70,-76,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'LOR':([39,40,41,45,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,93,123,124,125,127,128,129,179,182,184,185,187,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,228,229,231,232,],[-57,118,-59,-53,-29,-65,-73,-31,-74,-75,-33,-77,-78,-79,-35,-37,-39,-42,-47,-50,-57,-71,-72,-60,-61,-62,-63,-30,-68,-69,-70,-76,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-54,-55,-56,-66,-67,-64,-58,]),'TIMESEQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[107,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'DIVEQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[108,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'MODEQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[109,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'PLUSEQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[110,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'MINUSEQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[111,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'LSHIFTEQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[112,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'RSHIFTEQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[113,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'ANDEQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[114,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'OREQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[115,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'XOREQUAL':([39,41,49,50,58,59,61,62,63,93,123,124,125,127,128,129,182,184,185,187,228,229,231,232,],[116,-59,-65,-73,-74,-75,-77,-78,-79,-57,-71,-72,-60,-61,-62,-63,-68,-69,-70,-76,-66,-67,-64,-58,]),'PERIOD':([41,49,50,58,59,61,62,63,123,124,182,184,185,187,228,229,],[121,-65,-73,-74,-75,-77,-78,-79,-71,-72,-68,-69,-70,-76,-66,-67,]),'ARROW':([41,49,50,58,59,61,62,63,123,124,182,184,185,187,228,229,],[122,-65,-73,-74,-75,-77,-78,-79,-71,-72,-68,-69,-70,-76,-66,-67,]),'ELSE':([72,76,77,78,79,80,152,154,156,161,163,209,214,244,245,251,254,],[-136,-137,-138,-139,-140,-141,-135,-134,-144,-149,-151,-133,-150,249,-147,-146,-148,]),'ELLIPSIS':([168,],[216,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,15,]),'function_definition':([0,1,],[3,3,]),'declaration':([0,1,27,70,],[4,4,73,153,]),'type_specifier':([0,1,27,32,47,70,94,130,168,173,191,220,],[5,5,75,101,133,75,133,133,101,101,101,101,]),'declarator':([5,24,29,75,101,173,],[16,34,89,89,169,34,]),'init_declarator_list':([5,75,],[17,17,]),'pointer':([5,22,24,29,75,101,133,173,191,],[19,33,19,19,19,171,190,171,190,]),'direct_declarator':([5,19,24,29,75,101,171,173,],[20,30,20,20,20,20,30,20,]),'init_declarator':([5,29,75,],[21,88,21,]),'compound_statement':([16,27,70,71,151,233,234,249,253,],[25,77,77,77,77,77,77,77,77,]),'initializer':([26,37,176,],[35,104,226,]),'assignment_expression':([26,27,37,47,70,71,86,94,105,117,119,120,126,130,151,157,158,159,160,176,230,233,234,235,249,250,253,],[36,87,36,87,87,87,87,87,177,87,87,183,87,87,87,210,87,87,87,36,243,87,87,87,87,87,87,]),'conditional_expression':([26,27,31,37,47,70,71,86,94,105,117,119,120,126,130,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[38,38,92,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,92,38,92,242,38,38,38,38,38,38,38,]),'unary_expression':([26,27,31,37,42,43,44,46,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,158,159,160,174,176,188,219,227,230,233,234,235,249,250,253,],[39,39,93,39,125,127,93,129,39,39,39,39,39,39,39,93,39,39,39,39,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,39,39,39,39,39,93,39,93,93,93,39,39,39,39,39,39,39,]),'logical_or_expression':([26,27,31,37,47,70,71,86,94,105,117,119,120,126,130,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'postfix_expression':([26,27,31,37,42,43,44,46,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,158,159,160,174,176,188,219,227,230,233,234,235,249,250,253,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'unary_operator':([26,27,31,37,42,43,44,46,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,158,159,160,174,176,188,219,227,230,233,234,235,249,250,253,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'cast_expression':([26,27,31,37,44,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,158,159,160,174,176,188,219,227,230,233,234,235,249,250,253,],[45,45,45,45,128,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,206,207,208,45,45,45,45,45,45,45,232,45,45,45,45,45,45,45,45,45,]),'logical_and_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[48,48,48,48,48,48,48,48,48,48,48,179,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'primary_expression':([26,27,31,37,42,43,44,46,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,158,159,160,174,176,188,219,227,230,233,234,235,249,250,253,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'inclusive_or_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,134,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,192,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'constant':([26,27,31,37,42,43,44,46,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,158,159,160,174,176,188,219,227,230,233,234,235,249,250,253,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'exclusive_or_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,134,135,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,193,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'and_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,194,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'equality_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,195,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'relational_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,196,197,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'shift_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,198,199,200,201,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'additive_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,202,203,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'multiplicative_expression':([26,27,31,37,47,70,71,86,94,105,117,118,119,120,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,151,157,158,159,160,174,176,219,227,230,233,234,235,249,250,253,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,204,205,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'declaration_list':([27,],[70,]),'statement_list':([27,70,],[71,151,]),'statement':([27,70,71,151,233,234,249,253,],[74,74,155,155,244,245,251,254,]),'expression_statement':([27,70,71,151,233,234,249,253,],[76,76,76,76,76,76,76,76,]),'selection_statement':([27,70,71,151,233,234,249,253,],[78,78,78,78,78,78,78,78,]),'iteration_statement':([27,70,71,151,233,234,249,253,],[79,79,79,79,79,79,79,79,]),'jump_statement':([27,70,71,151,233,234,249,253,],[80,80,80,80,80,80,80,80,]),'expression':([27,47,70,71,86,94,117,119,126,130,151,158,159,160,233,234,235,249,250,253,],[81,131,81,81,162,131,178,180,131,131,81,211,212,213,81,81,246,81,252,81,]),'constant_expression':([31,174,219,],[90,223,236,]),'parameter_type_list':([32,173,191,220,],[95,222,222,238,]),'identifier_list':([32,],[97,]),'parameter_list':([32,173,191,220,],[98,98,98,98,]),'parameter_declaration':([32,168,173,191,220,],[100,217,100,100,100,]),'initializer_list':([37,],[103,]),'assignment_operator':([39,],[105,]),'type_name':([47,94,130,],[132,132,186,]),'abstract_declarator':([101,133,173,191,],[170,189,221,221,]),'direct_abstract_declarator':([101,133,171,173,190,191,],[172,172,218,172,218,172,]),'argument_expression_list':([120,],[181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparse_revised.py',14),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparse_revised.py',15),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','cparse_revised.py',25),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','cparse_revised.py',29),
  ('function_definition -> type_specifier declarator compound_statement','function_definition',3,'p_function_definition','cparse_revised.py',33),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparse_revised.py',42),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparse_revised.py',43),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparse_revised.py',44),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparse_revised.py',45),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparse_revised.py',46),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparse_revised.py',47),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparse_revised.py',48),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','cparse_revised.py',49),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','cparse_revised.py',50),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_1','cparse_revised.py',57),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_2','cparse_revised.py',61),
  ('pointer -> TIMES','pointer',1,'p_pointer_1','cparse_revised.py',67),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer_2','cparse_revised.py',71),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator_1','cparse_revised.py',77),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','cparse_revised.py',81),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET','direct_declarator',4,'p_direct_declarator_3','cparse_revised.py',85),
  ('direct_declarator -> direct_declarator LBRACKET RBRACKET','direct_declarator',3,'p_direct_declarator_4','cparse_revised.py',89),
  ('direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN','direct_declarator',4,'p_direct_declarator_5','cparse_revised.py',93),
  ('direct_declarator -> direct_declarator LPAREN identifier_list RPAREN','direct_declarator',4,'p_direct_declarator_6','cparse_revised.py',97),
  ('direct_declarator -> direct_declarator LPAREN RPAREN','direct_declarator',3,'p_direct_declarator_7','cparse_revised.py',101),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparse_revised.py',107),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparse_revised.py',112),
  ('conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparse_revised.py',113),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparse_revised.py',121),
  ('logical_or_expression -> logical_or_expression LOR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparse_revised.py',122),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparse_revised.py',130),
  ('logical_and_expression -> logical_and_expression LAND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparse_revised.py',131),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparse_revised.py',139),
  ('inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparse_revised.py',140),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparse_revised.py',148),
  ('exclusive_or_expression -> exclusive_or_expression XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparse_revised.py',149),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparse_revised.py',157),
  ('and_expression -> and_expression AND equality_expression','and_expression',3,'p_and_expression','cparse_revised.py',158),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparse_revised.py',166),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','cparse_revised.py',167),
  ('equality_expression -> equality_expression NE relational_expression','equality_expression',3,'p_equality_expression','cparse_revised.py',168),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparse_revised.py',176),
  ('relational_expression -> relational_expression LT shift_expression','relational_expression',3,'p_relational_expression','cparse_revised.py',177),
  ('relational_expression -> relational_expression GT shift_expression','relational_expression',3,'p_relational_expression','cparse_revised.py',178),
  ('relational_expression -> relational_expression LE shift_expression','relational_expression',3,'p_relational_expression','cparse_revised.py',179),
  ('relational_expression -> relational_expression GE shift_expression','relational_expression',3,'p_relational_expression','cparse_revised.py',180),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparse_revised.py',188),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','cparse_revised.py',189),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','cparse_revised.py',190),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparse_revised.py',198),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','cparse_revised.py',199),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','cparse_revised.py',200),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparse_revised.py',208),
  ('multiplicative_expression -> multiplicative_expression TIMES cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparse_revised.py',209),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparse_revised.py',210),
  ('multiplicative_expression -> multiplicative_expression MOD cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparse_revised.py',211),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparse_revised.py',220),
  ('cast_expression -> LPAREN type_name RPAREN cast_expression','cast_expression',4,'p_cast_expression','cparse_revised.py',221),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','cparse_revised.py',229),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','cparse_revised.py',233),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','cparse_revised.py',234),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparse_revised.py',235),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparse_revised.py',239),
  ('unary_expression -> SIZEOF LPAREN type_name RPAREN','unary_expression',4,'p_unary_expression_3','cparse_revised.py',240),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','cparse_revised.py',249),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','cparse_revised.py',253),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN','postfix_expression',4,'p_postfix_expression_3','cparse_revised.py',257),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','cparse_revised.py',258),
  ('postfix_expression -> postfix_expression PERIOD ID','postfix_expression',3,'p_postfix_expression_4','cparse_revised.py',266),
  ('postfix_expression -> postfix_expression ARROW ID','postfix_expression',3,'p_postfix_expression_4','cparse_revised.py',267),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_5','cparse_revised.py',272),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_5','cparse_revised.py',273),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','cparse_revised.py',280),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','cparse_revised.py',281),
  ('primary_expression -> SCONST','primary_expression',1,'p_primary_expression','cparse_revised.py',282),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','cparse_revised.py',283),
  ('constant -> ICONST','constant',1,'p_constant','cparse_revised.py',291),
  ('constant -> FCONST','constant',1,'p_constant','cparse_revised.py',292),
  ('constant -> CCONST','constant',1,'p_constant','cparse_revised.py',293),
  ('expression -> assignment_expression','expression',1,'p_expression','cparse_revised.py',300),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparse_revised.py',301),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparse_revised.py',309),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparse_revised.py',310),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','cparse_revised.py',321),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',322),
  ('assignment_operator -> DIVEQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',323),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',324),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',325),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',326),
  ('assignment_operator -> LSHIFTEQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',327),
  ('assignment_operator -> RSHIFTEQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',328),
  ('assignment_operator -> ANDEQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',329),
  ('assignment_operator -> OREQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',330),
  ('assignment_operator -> XOREQUAL','assignment_operator',1,'p_assignment_operator','cparse_revised.py',331),
  ('unary_operator -> AND','unary_operator',1,'p_unary_operator','cparse_revised.py',338),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','cparse_revised.py',339),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','cparse_revised.py',340),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','cparse_revised.py',341),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','cparse_revised.py',342),
  ('unary_operator -> LNOT','unary_operator',1,'p_unary_operator','cparse_revised.py',343),
  ('type_name -> type_specifier abstract_declarator','type_name',2,'p_type_name_1','cparse_revised.py',350),
  ('type_name -> type_specifier','type_name',1,'p_type_name_2','cparse_revised.py',354),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list_1','cparse_revised.py',360),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list_2','cparse_revised.py',364),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1','cparse_revised.py',370),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_2','cparse_revised.py',374),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration_1','cparse_revised.py',380),
  ('parameter_declaration -> type_specifier abstract_declarator','parameter_declaration',2,'p_parameter_declaration_2','cparse_revised.py',384),
  ('parameter_declaration -> type_specifier','parameter_declaration',1,'p_parameter_declaration_3','cparse_revised.py',388),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator_1','cparse_revised.py',394),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator_2','cparse_revised.py',398),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator_3','cparse_revised.py',402),
  ('direct_abstract_declarator -> LPAREN abstract_declarator RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_1','cparse_revised.py',408),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression RBRACKET','direct_abstract_declarator',4,'p_direct_abstract_declarator_2','cparse_revised.py',412),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator_3','cparse_revised.py',416),
  ('direct_abstract_declarator -> LBRACKET constant_expression RBRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator_4','cparse_revised.py',420),
  ('direct_abstract_declarator -> LBRACKET RBRACKET','direct_abstract_declarator',2,'p_direct_abstract_declarator_5','cparse_revised.py',424),
  ('direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator_6','cparse_revised.py',428),
  ('direct_abstract_declarator -> LPAREN parameter_type_list RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_7','cparse_revised.py',432),
  ('declaration -> type_specifier init_declarator_list SEMI','declaration',3,'p_declaration_1','cparse_revised.py',438),
  ('declaration -> type_specifier SEMI','declaration',2,'p_declaration_2','cparse_revised.py',442),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1','cparse_revised.py',447),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2','cparse_revised.py',451),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator_1','cparse_revised.py',457),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator_2','cparse_revised.py',461),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparse_revised.py',466),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparse_revised.py',467),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','cparse_revised.py',474),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','cparse_revised.py',478),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','cparse_revised.py',479),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list_1','cparse_revised.py',488),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list_2','cparse_revised.py',492),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement_1','cparse_revised.py',498),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement_2','cparse_revised.py',502),
  ('compound_statement -> LBRACE declaration_list RBRACE','compound_statement',3,'p_compound_statement_3','cparse_revised.py',506),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement_4','cparse_revised.py',510),
  ('statement -> expression_statement','statement',1,'p_statement','cparse_revised.py',516),
  ('statement -> compound_statement','statement',1,'p_statement','cparse_revised.py',517),
  ('statement -> selection_statement','statement',1,'p_statement','cparse_revised.py',518),
  ('statement -> iteration_statement','statement',1,'p_statement','cparse_revised.py',519),
  ('statement -> jump_statement','statement',1,'p_statement','cparse_revised.py',520),
  ('statement_list -> statement','statement_list',1,'p_statement_list_1','cparse_revised.py',526),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','cparse_revised.py',531),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','cparse_revised.py',538),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','cparse_revised.py',547),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','cparse_revised.py',551),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','cparse_revised.py',557),
  ('iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement','iteration_statement',9,'p_iteration_statement_2','cparse_revised.py',561),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','cparse_revised.py',568),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement_2','cparse_revised.py',572),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement_3','cparse_revised.py',576),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparse_revised.py',582),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparse_revised.py',583),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list_1','cparse_revised.py',593),
  ('identifier_list -> identifier_list COMMA ID','identifier_list',3,'p_identifier_list_2','cparse_revised.py',597),
  ('empty -> <empty>','empty',0,'p_empty','cparse_revised.py',602),
]
